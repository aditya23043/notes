#+TITLE: Adi's Emacs Basic Configuration
#+AUTHOR: Aditya Gautam

* FONTS
#+begin_src emacs-lisp

  (set-face-attribute 'default nil
    :font "JetBrainsMono NFM"
    :height 130
    :weight 'Bold)
  (set-face-attribute 'variable-pitch nil
    :font "JetBrainsMono NFM"
    :height 130
    :weight 'Bold)
  (set-face-attribute 'fixed-pitch nil
    :font "JetBrainsMono NFM"
    :height 130
    :weight 'Bold)
  (set-face-attribute 'italic nil 
    :font "JetBrainsMono NFM"
    :slant 'italic
    :height 130) 
  (set-face-attribute 'bold nil 
    :font "JetBrainsMono NFM"
    :weight 'bold
    :height 130) 
  (set-face-attribute 'bold-italic nil 
    :font "JetBrainsMono NFM"
    :weight 'bold
    :slant 'italic
    :height 130) 
  (setq-default line-spacing 0.10)
  (set-language-environment "UTF-8")

#+end_src

* GUI
#+begin_src emacs-lisp

(setq use-dialog-box nil) ; No dialog box
(menu-bar-mode -1) ;Disable menu
(tool-bar-mode -1) ;Disable toolbar
(scroll-bar-mode -1) ;Disable scroll bar
;; Transparency
(let ((opacity 100))
  (set-frame-parameter nil 'alpha-background opacity) ; For current frame
  (add-to-list 'default-frame-alist `(alpha-background . ,opacity))) ; For all new frames henceforth

#+end_src

* Options
#+begin_src emacs-lisp

  ;; Enable mouse in term-mode
  (setq blink-cursor-mode nil ; Exactly what is sounds like
      use-short-answers t ; Set y or n instead of yes or no for questions
      display-line-numbers-type 'relative ; Realive line numbers
      frame-resize-pixelwise t) ; Better frame resizing
  (setq-default tab-width 2 ; self explanitory
      indent-tabs-mode nil ; use spaces not tabs
      truncate-lines t) ;Allow truncated lines
  (electric-pair-mode 1) ; Auto closing pairs like () and {}
  (save-place-mode) ; Save cursor position in buffer on reopen
  ;;r(global-hl-line-mode) ; Highlight the current line
  (electric-indent-mode t) ; Auto Indent
  (global-display-line-numbers-mode 1) ; Display line numbers
  (global-prettify-symbols-mode)

#+end_src

* Scrolling
#+begin_src emacs-lisp 

(setq-default pixel-scroll-precision-mode t
      mouse-wheel-scroll-amount '(1 ((shift) . 1)) ;; one line at a time
      mouse-wheel-progressive-speed nil ;; don't accelerate scrolling
      mouse-wheel-follow-mouse t ;; scroll window under mouse
      mouse-wheel-tilt-scroll t
      scroll-margin 7
      scroll-preserve-screen-position t
      scroll-conservatively 101)

#+end_src

* Trash
#+begin_src emacs-lisp

(setq make-backup-files nil
    auto-save-default nil
    create-lockfiles nil
    custom-file (concat user-emacs-directory "trash.el"))

#+end_src

* Package Manger
#+begin_src emacs-lisp 

(require 'package) ; load the package manager
(setq package-check-signature nil) ; override signature errors
;; add package archives to package manager
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize) ; exactly what it sounds like 
;; pull archvies and prevent warning messages only on very first startup
(unless package-archive-contents
  (progn
    (setq warning-minimum-level :emergency) 
    (package-refresh-contents)))

#+end_src

* Use Package
#+begin_src emacs-lisp 

;; install use-package if it doesn't exist yet
(unless (package-installed-p 'use-package) 
  (package-install 'use-package))          
(eval-when-compile
  (require 'use-package))
;; Make use-package uses `package.el', prevents having to use :ensure t on everything
(setq use-package-always-ensure t) 

#+end_src

* Quelpa
#+begin_src emacs-lisp 

(setq quelpa-update-melpa-p nil) ;; stop quelpa from trying to update the melpa all the time
(unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))

#+end_src

* Quelpa use-package
#+begin_src emacs-lisp 

(quelpa
 '(quelpa-use-package
   :fetcher git
   :url "https://github.com/quelpa/quelpa-use-package.git"))
(require 'quelpa-use-package)
;; `USAGE'
;; uses the given recipe
;; (use-package abc-mode
;;  :quelpa (abc-mode :fetcher github :repo "mkjunker/abc-mode"))
;; (use-package chan :quelpa (:fetcher))

#+end_src

* GENERAL Keybinding
#+begin_src emacs-lisp

(use-package general
  :config
    (general-define-key 
      :keymaps 'indent-rigidly-map
        "TAB" #'indent-rigidly-right-to-tab-stop
        "<tab>" #'indent-rigidly-right-to-tab-stop
        "DEL" #'indent-rigidly-left-to-tab-stop
        "<backtab>" #'indent-rigidly-left-to-tab-stop
        "h" #'indent-rigidly-left
        "l" #'indent-rigidly-right)
    ;; set up 'SPC' as the global leader key
    (general-create-definer leader
      :states '(normal insert visual emacs motion)
      :keymaps 'override
      :prefix "SPC" ;; set leader
      :global-prefix "M-SPC") ;; access leader in insert mode
    (leader
      "b k" '(kill-this-buffer :wk "Kill this buffer")
      "b r" '(revert-buffer :wk "Reload this buffer"))
    (leader
      "e" '(:ignore t :wk "Evaluate")    
      "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
      "e e" '(eval-expression :wk "Evaluate and elisp expression")
      "e r" '(eval-region :wk "Evaluate selected elisp")) 
    (leader
      "h" '(:ignore t :wk "Help")
      "h f" '(describe-function :wk "Help function")
      "h v" '(describe-variable :wk "Help variable")
      "h m" '(describe-mode :wk "Help mode")
      "h c" '(describe-char :wk "Help character")
      "h k" '(describe-key :wk "Help key/keybind"))
    (leader
      "c r" '(comment-region :wk "Comment selection")
      "c l" '(comment-line :wk "Comment line"))
    (leader
      "f f" '(find-file :wk "Find File"))
    (leader
      "i r" '(indent-rigidly :wk "Indent Rigidly")))

#+end_src

* EVIL MODE
#+begin_src emacs-lisp

  (use-package evil
    :general
      (leader
        "w" '(:ignore t :wk "Window Navigation")
        "w h" '(evil-window-left :wk "Move left to window")
        "w j" '(evil-window-down :wk "Move down to window")
        "w k" '(evil-window-up :wk "Move up to window")
        "w l" '(evil-window-right :wk "Move right to window")
        "w s" '(evil-window-split :wk "Split window horizontally")
        "w v" '(evil-window-vsplit :wk "Split window vertically"))
      (:states 'insert
        "<tab>" #'tab-to-tab-stop
        "TAB" #'tab-to-tab-stop)
      (:states '(normal insert visual emacs)
        "C-u" #'evil-scroll-up
        "C-d" #'evil-scroll-down)
      (:states '(normal emacs)
        "J" #'shrink-window
        "K" #'enlarge-window
        "H" #'shrink-window-horizontally
        "L" #'enlarge-window-horizontally
        ;; "u" #'undo-tree-undo
        ;; "R" #'undo-tree-redo
        )
    :init      ;; tweak evil's configuration before loading it
      (setq evil-want-integration t ;; This is optional since it's already set to t by default.
            evil-want-keybinding nil
            evil-vsplit-window-right t
            evil-split-window-below t
            evil-shift-width 4)
      (evil-mode)
    :config
      ;; These hooks may not work if TERM isnt xterm/xterm256
      ;; Let cursor change based on mode when using emacs in the terminal
      (unless (display-graphic-p)
        (defun jl/correct-cursor (&rest r)
          (setq visible-cursor nil) 
          (if (eq evil-state 'insert)
            (send-string-to-terminal "\e[5 q")
            (send-string-to-terminal "\e[2 q")))
        (add-hook 'evil-insert-state-entry-hook #'jl/correct-cursor)
        (add-hook 'evil-command-window-mode-hook #'jl/correct-cursor)
        (add-hook 'evil-insert-state-exit-hook #'jl/correct-cursor)
        (add-hook 'evil-normal-state-entry-hook #'jl/correct-cursor)
        (add-hook 'evil-normal-state-exit-hook #'jl/correct-cursor)
        (add-hook 'after-save-hook #'jl/correct-cursor)
        (advice-add 'eldoc-documentation-default :after #'jl/correct-cursor) ;;Echo Area
        (advice-add 'eldoc-display-in-buffer :after #'jl/correct-cursor))) ;;Buffer

#+end_src

** Evil Collection
#+begin_src emacs-lisp

(use-package evil-collection
  :after evil
  :config
    (setq evil-collection-mode-list '(magit ement term help dashboard ibuffer tetris))
    (evil-collection-init))

#+end_src

** Evil Org Agenda
#+begin_src emacs-lisp

(use-package evil-org
  :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

#+end_src
