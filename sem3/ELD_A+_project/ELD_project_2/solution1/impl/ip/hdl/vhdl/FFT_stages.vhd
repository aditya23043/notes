-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT_stages is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    FFT_input_M_real_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_input_M_real_ce0 : OUT STD_LOGIC;
    FFT_input_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_input_M_real_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_input_M_real_ce1 : OUT STD_LOGIC;
    FFT_input_M_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_input_M_imag_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_input_M_imag_ce0 : OUT STD_LOGIC;
    FFT_input_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_input_M_imag_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_input_M_imag_ce1 : OUT STD_LOGIC;
    FFT_input_M_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_output_M_real_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_output_M_real_ce0 : OUT STD_LOGIC;
    FFT_output_M_real_we0 : OUT STD_LOGIC;
    FFT_output_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    FFT_output_M_real_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_output_M_real_ce1 : OUT STD_LOGIC;
    FFT_output_M_real_we1 : OUT STD_LOGIC;
    FFT_output_M_real_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    FFT_output_M_imag_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_output_M_imag_ce0 : OUT STD_LOGIC;
    FFT_output_M_imag_we0 : OUT STD_LOGIC;
    FFT_output_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    FFT_output_M_imag_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_output_M_imag_ce1 : OUT STD_LOGIC;
    FFT_output_M_imag_we1 : OUT STD_LOGIC;
    FFT_output_M_imag_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of FFT_stages is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_3F3504F3 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001101010000010011110011";
    constant ap_const_lv32_BF3504F3 : STD_LOGIC_VECTOR (31 downto 0) := "10111111001101010000010011110011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_473 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_M_real_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal temp1_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_M_imag_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_454_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_459_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal temp2_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_551 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln10_fu_559_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln10_1_fu_577_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln14_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_818 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_2_fu_595_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln14_1_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_reg_834 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_625_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_850 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_M_real_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal p_r_M_imag_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_input_M_real_lo_reg_867 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_input_M_imag_lo_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln21_2_fu_649_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln21_2_reg_882 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_3_fu_631_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_663_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_890 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_1_reg_895 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln20_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln21_1_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_1_reg_900 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_fu_690_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_r_M_real_5_fu_700_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_5_fu_710_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln21_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_reg_933 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal i_2_fu_739_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_952 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal zext_ln28_1_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_1_reg_957 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln27_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_r_M_real_3_fu_761_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_3_fu_777_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln28_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_reg_985 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal temp1_M_real_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp1_M_real_ce0 : STD_LOGIC;
    signal temp1_M_real_we0 : STD_LOGIC;
    signal temp1_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_M_real_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp1_M_real_ce1 : STD_LOGIC;
    signal temp1_M_real_we1 : STD_LOGIC;
    signal temp1_M_imag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp1_M_imag_ce0 : STD_LOGIC;
    signal temp1_M_imag_we0 : STD_LOGIC;
    signal temp1_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_M_imag_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp1_M_imag_ce1 : STD_LOGIC;
    signal temp1_M_imag_we1 : STD_LOGIC;
    signal temp2_M_real_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp2_M_real_ce0 : STD_LOGIC;
    signal temp2_M_real_we0 : STD_LOGIC;
    signal temp2_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_M_imag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp2_M_imag_ce0 : STD_LOGIC;
    signal temp2_M_imag_we0 : STD_LOGIC;
    signal temp2_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln10_reg_364 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln10_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln10_1_reg_375 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln10_1_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_386 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i2_0_reg_397 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_409 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal i3_0_reg_421 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal zext_ln10_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln10_1_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_433_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_437_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_441_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_445_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_449_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_454_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_459_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_459_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_464_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln13_fu_609_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln14_fu_613_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln19_fu_639_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln21_fu_643_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln20_fu_653_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln21_fu_679_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln21_fu_696_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln_fu_720_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln28_fu_745_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln28_fu_757_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_433_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);

    component fft_8point_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_8point_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_8point_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_8point_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_8point_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_stages_temp1_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_stages_temp2_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp1_M_real_U : component FFT_stages_temp1_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp1_M_real_address0,
        ce0 => temp1_M_real_ce0,
        we0 => temp1_M_real_we0,
        d0 => temp1_M_real_d0,
        q0 => temp1_M_real_q0,
        address1 => temp1_M_real_address1,
        ce1 => temp1_M_real_ce1,
        we1 => temp1_M_real_we1,
        d1 => reg_491,
        q1 => temp1_M_real_q1);

    temp1_M_imag_U : component FFT_stages_temp1_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp1_M_imag_address0,
        ce0 => temp1_M_imag_ce0,
        we0 => temp1_M_imag_we0,
        d0 => temp1_M_imag_d0,
        q0 => temp1_M_imag_q0,
        address1 => temp1_M_imag_address1,
        ce1 => temp1_M_imag_ce1,
        we1 => temp1_M_imag_we1,
        d1 => reg_498,
        q1 => temp1_M_imag_q1);

    temp2_M_real_U : component FFT_stages_temp2_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp2_M_real_address0,
        ce0 => temp2_M_real_ce0,
        we0 => temp2_M_real_we0,
        d0 => temp2_M_real_d0,
        q0 => temp2_M_real_q0);

    temp2_M_imag_U : component FFT_stages_temp2_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp2_M_imag_address0,
        ce0 => temp2_M_imag_ce0,
        we0 => temp2_M_imag_we0,
        d0 => temp2_M_imag_d0,
        q0 => temp2_M_imag_q0);

    fft_8point_faddfsub_32ns_32ns_32_5_full_dsp_1_U1 : component fft_8point_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_433_p0,
        din1 => grp_fu_433_p1,
        opcode => grp_fu_433_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_433_p2);

    fft_8point_fadd_32ns_32ns_32_5_full_dsp_1_U2 : component fft_8point_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_437_p0,
        din1 => grp_fu_437_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p2);

    fft_8point_fsub_32ns_32ns_32_5_full_dsp_1_U3 : component fft_8point_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_441_p0,
        din1 => grp_fu_441_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_441_p2);

    fft_8point_fsub_32ns_32ns_32_5_full_dsp_1_U4 : component fft_8point_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_445_p0,
        din1 => grp_fu_445_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_445_p2);

    fft_8point_fmul_32ns_32ns_32_4_max_dsp_1_U5 : component fft_8point_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_449_p0,
        din1 => grp_fu_449_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_449_p2);

    fft_8point_fmul_32ns_32ns_32_4_max_dsp_1_U6 : component fft_8point_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_454_p0,
        din1 => grp_fu_454_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_454_p2);

    fft_8point_fmul_32ns_32ns_32_4_max_dsp_1_U7 : component fft_8point_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_459_p0,
        din1 => grp_fu_459_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_459_p2);

    fft_8point_fmul_32ns_32ns_32_4_max_dsp_1_U8 : component fft_8point_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_464_p0,
        din1 => grp_fu_464_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_464_p2);

    fft_8point_mux_42_32_1_1_U9 : component fft_8point_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_3F3504F3,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_BF3504F3,
        din4 => trunc_ln28_fu_757_p1,
        dout => p_r_M_real_3_fu_761_p6);

    fft_8point_mux_42_32_1_1_U10 : component fft_8point_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_BF3504F3,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_BF3504F3,
        din4 => trunc_ln28_fu_757_p1,
        dout => p_r_M_imag_3_fu_777_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i2_0_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_595_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_0_reg_397 <= ap_const_lv4_0;
            elsif (((icmp_ln20_fu_657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i2_0_reg_397 <= i_3_fu_690_p2;
            end if; 
        end if;
    end process;

    i3_0_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_631_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i3_0_reg_421 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                i3_0_reg_421 <= i_2_reg_952;
            end if; 
        end if;
    end process;

    i_0_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_1_fu_589_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_386 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_0_reg_386 <= i_reg_850;
            end if; 
        end if;
    end process;

    j_0_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                j_0_reg_409 <= j_reg_890;
            elsif (((tmp_3_fu_631_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                j_0_reg_409 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln10_1_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_571_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln10_1_reg_375 <= ap_const_lv3_0;
            elsif (((icmp_ln10_1_fu_589_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_ln10_1_reg_375 <= add_ln10_1_fu_577_p2;
            end if; 
        end if;
    end process;

    phi_ln10_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_571_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln10_reg_364 <= add_ln10_fu_559_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_ln10_reg_364 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    reg_505_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                reg_505 <= temp1_M_real_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_505 <= temp1_M_real_q1;
            end if; 
        end if;
    end process;

    reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                reg_514 <= temp1_M_imag_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_514 <= temp1_M_imag_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                FFT_input_M_imag_lo_reg_873 <= FFT_input_M_imag_q1;
                FFT_input_M_real_lo_reg_867 <= FFT_input_M_real_q1;
                p_r_M_imag_reg_861 <= FFT_input_M_imag_q0;
                p_r_M_real_reg_855 <= FFT_input_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                i_2_reg_952 <= i_2_fu_739_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_595_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                i_reg_850 <= i_fu_625_p2;
                    zext_ln14_1_reg_834(2 downto 1) <= zext_ln14_1_fu_619_p1(2 downto 1);
                    zext_ln14_reg_818(3 downto 0) <= zext_ln14_fu_603_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j_reg_890 <= j_fu_663_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_473 <= grp_fu_433_p2;
                reg_482 <= grp_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_491 <= grp_fu_441_p2;
                reg_498 <= grp_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_523 <= grp_fu_449_p2;
                reg_528 <= grp_fu_454_p2;
                reg_533 <= grp_fu_459_p2;
                reg_538 <= grp_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state39))) then
                reg_543 <= temp2_M_real_q0;
                reg_551 <= temp2_M_imag_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_657_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                tmp_1_reg_895 <= i2_0_reg_397(3 downto 2);
                    zext_ln21_1_reg_900(3 downto 0) <= zext_ln21_1_fu_684_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_631_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    zext_ln21_2_reg_882(0) <= zext_ln21_2_fu_649_p1(0);    zext_ln21_2_reg_882(2) <= zext_ln21_2_fu_649_p1(2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    zext_ln21_reg_933(3 downto 0) <= zext_ln21_fu_727_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_733_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    zext_ln28_1_reg_957(2 downto 0) <= zext_ln28_1_fu_751_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                    zext_ln28_reg_985(2 downto 0) <= zext_ln28_fu_793_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln14_reg_818(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln14_1_reg_834(0) <= '1';
    zext_ln14_1_reg_834(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln21_2_reg_882(1) <= '1';
    zext_ln21_2_reg_882(3) <= '0';
    zext_ln21_1_reg_900(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln21_reg_933(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln28_1_reg_957(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln28_reg_985(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_2_fu_595_p3, ap_CS_fsm_state12, tmp_3_fu_631_p3, ap_CS_fsm_state13, icmp_ln20_fu_657_p2, ap_CS_fsm_state30, icmp_ln27_fu_733_p2, icmp_ln10_fu_571_p2, icmp_ln10_1_fu_589_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_571_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln10_1_fu_589_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_2_fu_595_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state12 => 
                if (((tmp_3_fu_631_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln20_fu_657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln27_fu_733_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    FFT_input_M_imag_address0 <= zext_ln14_fu_603_p1(3 - 1 downto 0);
    FFT_input_M_imag_address1 <= zext_ln14_1_fu_619_p1(3 - 1 downto 0);

    FFT_input_M_imag_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            FFT_input_M_imag_ce0 <= ap_const_logic_1;
        else 
            FFT_input_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_input_M_imag_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            FFT_input_M_imag_ce1 <= ap_const_logic_1;
        else 
            FFT_input_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    FFT_input_M_real_address0 <= zext_ln14_fu_603_p1(3 - 1 downto 0);
    FFT_input_M_real_address1 <= zext_ln14_1_fu_619_p1(3 - 1 downto 0);

    FFT_input_M_real_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            FFT_input_M_real_ce0 <= ap_const_logic_1;
        else 
            FFT_input_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_input_M_real_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            FFT_input_M_real_ce1 <= ap_const_logic_1;
        else 
            FFT_input_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    FFT_output_M_imag_address0 <= zext_ln28_reg_985(3 - 1 downto 0);
    FFT_output_M_imag_address1 <= zext_ln28_1_reg_957(3 - 1 downto 0);

    FFT_output_M_imag_ce0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            FFT_output_M_imag_ce0 <= ap_const_logic_1;
        else 
            FFT_output_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_output_M_imag_ce1_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            FFT_output_M_imag_ce1 <= ap_const_logic_1;
        else 
            FFT_output_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    FFT_output_M_imag_d0 <= reg_482;
    FFT_output_M_imag_d1 <= reg_498;

    FFT_output_M_imag_we0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            FFT_output_M_imag_we0 <= ap_const_logic_1;
        else 
            FFT_output_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_output_M_imag_we1_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            FFT_output_M_imag_we1 <= ap_const_logic_1;
        else 
            FFT_output_M_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;

    FFT_output_M_real_address0 <= zext_ln28_reg_985(3 - 1 downto 0);
    FFT_output_M_real_address1 <= zext_ln28_1_reg_957(3 - 1 downto 0);

    FFT_output_M_real_ce0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            FFT_output_M_real_ce0 <= ap_const_logic_1;
        else 
            FFT_output_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_output_M_real_ce1_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            FFT_output_M_real_ce1 <= ap_const_logic_1;
        else 
            FFT_output_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    FFT_output_M_real_d0 <= reg_473;
    FFT_output_M_real_d1 <= reg_491;

    FFT_output_M_real_we0_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            FFT_output_M_real_we0 <= ap_const_logic_1;
        else 
            FFT_output_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_output_M_real_we1_assign_proc : process(ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            FFT_output_M_real_we1 <= ap_const_logic_1;
        else 
            FFT_output_M_real_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln10_1_fu_577_p2 <= std_logic_vector(unsigned(phi_ln10_1_reg_375) + unsigned(ap_const_lv3_1));
    add_ln10_fu_559_p2 <= std_logic_vector(unsigned(phi_ln10_reg_364) + unsigned(ap_const_lv3_1));
    add_ln21_fu_679_p2 <= std_logic_vector(unsigned(zext_ln21_2_reg_882) + unsigned(zext_ln20_fu_653_p1));
    add_ln_fu_720_p3 <= (tmp_1_reg_895 & j_0_reg_409);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30, icmp_ln27_fu_733_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln27_fu_733_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30, icmp_ln27_fu_733_p2)
    begin
        if (((icmp_ln27_fu_733_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_433_opcode_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_433_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_fu_433_opcode <= ap_const_lv2_0;
        else 
            grp_fu_433_opcode <= "XX";
        end if; 
    end process;


    grp_fu_433_p0_assign_proc : process(reg_505, reg_523, reg_543, p_r_M_real_reg_855, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_433_p0 <= reg_543;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_433_p0 <= reg_505;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_433_p0 <= reg_523;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_433_p0 <= p_r_M_real_reg_855;
        else 
            grp_fu_433_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_433_p1_assign_proc : process(reg_473, reg_528, FFT_input_M_real_lo_reg_867, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_433_p1 <= reg_473;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_433_p1 <= reg_528;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_433_p1 <= FFT_input_M_real_lo_reg_867;
        else 
            grp_fu_433_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_437_p0_assign_proc : process(reg_514, reg_533, reg_551, p_r_M_imag_reg_861, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_437_p0 <= reg_551;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_437_p0 <= reg_514;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_437_p0 <= reg_533;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_437_p0 <= p_r_M_imag_reg_861;
        else 
            grp_fu_437_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_437_p1_assign_proc : process(reg_482, reg_538, FFT_input_M_imag_lo_reg_873, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state23, ap_CS_fsm_state35, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_437_p1 <= reg_482;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_437_p1 <= reg_538;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_437_p1 <= FFT_input_M_imag_lo_reg_873;
        else 
            grp_fu_437_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_441_p0_assign_proc : process(reg_505, reg_543, p_r_M_real_reg_855, ap_CS_fsm_state6, ap_CS_fsm_state23, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_441_p0 <= reg_543;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_441_p0 <= reg_505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_441_p0 <= p_r_M_real_reg_855;
        else 
            grp_fu_441_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_441_p1_assign_proc : process(reg_473, FFT_input_M_real_lo_reg_867, ap_CS_fsm_state6, ap_CS_fsm_state23, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_441_p1 <= reg_473;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_441_p1 <= FFT_input_M_real_lo_reg_867;
        else 
            grp_fu_441_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_445_p0_assign_proc : process(reg_514, reg_551, p_r_M_imag_reg_861, ap_CS_fsm_state6, ap_CS_fsm_state23, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_fu_445_p0 <= reg_551;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_445_p0 <= reg_514;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_445_p0 <= p_r_M_imag_reg_861;
        else 
            grp_fu_445_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_445_p1_assign_proc : process(reg_482, FFT_input_M_imag_lo_reg_873, ap_CS_fsm_state6, ap_CS_fsm_state23, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            grp_fu_445_p1 <= reg_482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_445_p1 <= FFT_input_M_imag_lo_reg_873;
        else 
            grp_fu_445_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_449_p0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state31, p_r_M_real_5_fu_700_p3, p_r_M_real_3_fu_761_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_449_p0 <= p_r_M_real_3_fu_761_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_449_p0 <= p_r_M_real_5_fu_700_p3;
        else 
            grp_fu_449_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_449_p1_assign_proc : process(temp1_M_real_q1, ap_CS_fsm_state14, temp2_M_real_q0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_449_p1 <= temp2_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_449_p1 <= temp1_M_real_q1;
        else 
            grp_fu_449_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_454_p0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state31, p_r_M_imag_5_fu_710_p3, p_r_M_imag_3_fu_777_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_454_p0 <= p_r_M_imag_3_fu_777_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_454_p0 <= p_r_M_imag_5_fu_710_p3;
        else 
            grp_fu_454_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_454_p1_assign_proc : process(ap_CS_fsm_state14, temp1_M_imag_q1, ap_CS_fsm_state31, temp2_M_imag_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_454_p1 <= temp2_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_454_p1 <= temp1_M_imag_q1;
        else 
            grp_fu_454_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_459_p0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state31, p_r_M_imag_5_fu_710_p3, p_r_M_imag_3_fu_777_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_459_p0 <= p_r_M_imag_3_fu_777_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_459_p0 <= p_r_M_imag_5_fu_710_p3;
        else 
            grp_fu_459_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_459_p1_assign_proc : process(temp1_M_real_q1, ap_CS_fsm_state14, temp2_M_real_q0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_459_p1 <= temp2_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_459_p1 <= temp1_M_real_q1;
        else 
            grp_fu_459_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_464_p0_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state31, p_r_M_real_5_fu_700_p3, p_r_M_real_3_fu_761_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_464_p0 <= p_r_M_real_3_fu_761_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_464_p0 <= p_r_M_real_5_fu_700_p3;
        else 
            grp_fu_464_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_464_p1_assign_proc : process(ap_CS_fsm_state14, temp1_M_imag_q1, ap_CS_fsm_state31, temp2_M_imag_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_464_p1 <= temp2_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_464_p1 <= temp1_M_imag_q1;
        else 
            grp_fu_464_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_2_fu_739_p2 <= std_logic_vector(unsigned(i3_0_reg_421) + unsigned(ap_const_lv3_1));
    i_3_fu_690_p2 <= std_logic_vector(unsigned(i2_0_reg_397) + unsigned(ap_const_lv4_4));
    i_fu_625_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(i_0_reg_386));
    icmp_ln10_1_fu_589_p2 <= "1" when (phi_ln10_1_reg_375 = ap_const_lv3_7) else "0";
    icmp_ln10_fu_571_p2 <= "1" when (phi_ln10_reg_364 = ap_const_lv3_7) else "0";
    icmp_ln20_fu_657_p2 <= "1" when (j_0_reg_409 = ap_const_lv2_2) else "0";
    icmp_ln27_fu_733_p2 <= "1" when (i3_0_reg_421 = ap_const_lv3_4) else "0";
    j_fu_663_p2 <= std_logic_vector(unsigned(j_0_reg_409) + unsigned(ap_const_lv2_1));
    or_ln14_fu_613_p2 <= (trunc_ln13_fu_609_p1 or ap_const_lv3_1);
    or_ln21_fu_643_p2 <= (trunc_ln19_fu_639_p1 or ap_const_lv3_2);
    p_r_M_imag_5_fu_710_p3 <= 
        ap_const_lv32_BF800000 when (trunc_ln21_fu_696_p1(0) = '1') else 
        ap_const_lv32_0;
    p_r_M_real_5_fu_700_p3 <= 
        ap_const_lv32_0 when (trunc_ln21_fu_696_p1(0) = '1') else 
        ap_const_lv32_3F800000;

    temp1_M_imag_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln14_reg_818, zext_ln21_fu_727_p1, ap_CS_fsm_state21, ap_CS_fsm_state11, zext_ln10_fu_565_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            temp1_M_imag_address0 <= zext_ln21_fu_727_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp1_M_imag_address0 <= zext_ln14_reg_818(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp1_M_imag_address0 <= zext_ln10_fu_565_p1(3 - 1 downto 0);
        else 
            temp1_M_imag_address0 <= "XXX";
        end if; 
    end process;


    temp1_M_imag_address1_assign_proc : process(zext_ln14_1_reg_834, ap_CS_fsm_state13, zext_ln21_1_fu_684_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp1_M_imag_address1 <= zext_ln21_1_fu_684_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp1_M_imag_address1 <= zext_ln14_1_reg_834(3 - 1 downto 0);
        else 
            temp1_M_imag_address1 <= "XXX";
        end if; 
    end process;


    temp1_M_imag_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state21, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            temp1_M_imag_ce0 <= ap_const_logic_1;
        else 
            temp1_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_M_imag_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            temp1_M_imag_ce1 <= ap_const_logic_1;
        else 
            temp1_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_M_imag_d0_assign_proc : process(reg_482, ap_CS_fsm_state2, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp1_M_imag_d0 <= reg_482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp1_M_imag_d0 <= ap_const_lv32_0;
        else 
            temp1_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp1_M_imag_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            temp1_M_imag_we0 <= ap_const_logic_1;
        else 
            temp1_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_M_imag_we1_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp1_M_imag_we1 <= ap_const_logic_1;
        else 
            temp1_M_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_M_real_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln14_reg_818, zext_ln21_fu_727_p1, ap_CS_fsm_state21, ap_CS_fsm_state11, zext_ln10_fu_565_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            temp1_M_real_address0 <= zext_ln21_fu_727_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp1_M_real_address0 <= zext_ln14_reg_818(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp1_M_real_address0 <= zext_ln10_fu_565_p1(3 - 1 downto 0);
        else 
            temp1_M_real_address0 <= "XXX";
        end if; 
    end process;


    temp1_M_real_address1_assign_proc : process(zext_ln14_1_reg_834, ap_CS_fsm_state13, zext_ln21_1_fu_684_p1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp1_M_real_address1 <= zext_ln21_1_fu_684_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp1_M_real_address1 <= zext_ln14_1_reg_834(3 - 1 downto 0);
        else 
            temp1_M_real_address1 <= "XXX";
        end if; 
    end process;


    temp1_M_real_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state21, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            temp1_M_real_ce0 <= ap_const_logic_1;
        else 
            temp1_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_M_real_ce1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            temp1_M_real_ce1 <= ap_const_logic_1;
        else 
            temp1_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_M_real_d0_assign_proc : process(reg_473, ap_CS_fsm_state2, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp1_M_real_d0 <= reg_473;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp1_M_real_d0 <= ap_const_lv32_0;
        else 
            temp1_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp1_M_real_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            temp1_M_real_we0 <= ap_const_logic_1;
        else 
            temp1_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_M_real_we1_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp1_M_real_we1 <= ap_const_logic_1;
        else 
            temp1_M_real_we1 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_M_imag_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln21_1_reg_900, zext_ln21_reg_933, ap_CS_fsm_state30, zext_ln28_1_fu_751_p1, zext_ln28_fu_793_p1, ap_CS_fsm_state38, ap_CS_fsm_state29, zext_ln10_1_fu_583_p1, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            temp2_M_imag_address0 <= zext_ln28_fu_793_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            temp2_M_imag_address0 <= zext_ln28_1_fu_751_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            temp2_M_imag_address0 <= zext_ln21_1_reg_900(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            temp2_M_imag_address0 <= zext_ln21_reg_933(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp2_M_imag_address0 <= zext_ln10_1_fu_583_p1(3 - 1 downto 0);
        else 
            temp2_M_imag_address0 <= "XXX";
        end if; 
    end process;


    temp2_M_imag_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state38, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            temp2_M_imag_ce0 <= ap_const_logic_1;
        else 
            temp2_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_M_imag_d0_assign_proc : process(reg_482, reg_498, ap_CS_fsm_state3, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            temp2_M_imag_d0 <= reg_498;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            temp2_M_imag_d0 <= reg_482;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp2_M_imag_d0 <= ap_const_lv32_0;
        else 
            temp2_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp2_M_imag_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            temp2_M_imag_we0 <= ap_const_logic_1;
        else 
            temp2_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_M_real_address0_assign_proc : process(ap_CS_fsm_state3, zext_ln21_1_reg_900, zext_ln21_reg_933, ap_CS_fsm_state30, zext_ln28_1_fu_751_p1, zext_ln28_fu_793_p1, ap_CS_fsm_state38, ap_CS_fsm_state29, zext_ln10_1_fu_583_p1, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            temp2_M_real_address0 <= zext_ln28_fu_793_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            temp2_M_real_address0 <= zext_ln28_1_fu_751_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            temp2_M_real_address0 <= zext_ln21_1_reg_900(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            temp2_M_real_address0 <= zext_ln21_reg_933(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp2_M_real_address0 <= zext_ln10_1_fu_583_p1(3 - 1 downto 0);
        else 
            temp2_M_real_address0 <= "XXX";
        end if; 
    end process;


    temp2_M_real_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state30, ap_CS_fsm_state38, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            temp2_M_real_ce0 <= ap_const_logic_1;
        else 
            temp2_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_M_real_d0_assign_proc : process(reg_473, reg_491, ap_CS_fsm_state3, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            temp2_M_real_d0 <= reg_491;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            temp2_M_real_d0 <= reg_473;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp2_M_real_d0 <= ap_const_lv32_0;
        else 
            temp2_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp2_M_real_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state29, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            temp2_M_real_we0 <= ap_const_logic_1;
        else 
            temp2_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_595_p3 <= i_0_reg_386(3 downto 3);
    tmp_3_fu_631_p3 <= i2_0_reg_397(3 downto 3);
    trunc_ln13_fu_609_p1 <= i_0_reg_386(3 - 1 downto 0);
    trunc_ln19_fu_639_p1 <= i2_0_reg_397(3 - 1 downto 0);
    trunc_ln21_fu_696_p1 <= j_0_reg_409(1 - 1 downto 0);
    trunc_ln28_fu_757_p1 <= i3_0_reg_421(2 - 1 downto 0);
    xor_ln28_fu_745_p2 <= (i3_0_reg_421 xor ap_const_lv3_4);
    zext_ln10_1_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln10_1_reg_375),64));
    zext_ln10_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln10_reg_364),64));
    zext_ln14_1_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln14_fu_613_p2),64));
    zext_ln14_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_386),64));
    zext_ln20_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_409),4));
    zext_ln21_1_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_679_p2),64));
    zext_ln21_2_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln21_fu_643_p2),4));
    zext_ln21_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_720_p3),64));
    zext_ln28_1_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln28_fu_745_p2),64));
    zext_ln28_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i3_0_reg_421),64));
end behav;
