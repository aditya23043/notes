-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_8point is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    FFT_input_M_real_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_input_M_real_ce0 : OUT STD_LOGIC;
    FFT_input_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_input_M_imag_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_input_M_imag_ce0 : OUT STD_LOGIC;
    FFT_input_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_output_M_real_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_output_M_real_ce0 : OUT STD_LOGIC;
    FFT_output_M_real_we0 : OUT STD_LOGIC;
    FFT_output_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    FFT_output_M_real_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_output_M_real_ce1 : OUT STD_LOGIC;
    FFT_output_M_real_we1 : OUT STD_LOGIC;
    FFT_output_M_real_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    FFT_output_M_imag_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_output_M_imag_ce0 : OUT STD_LOGIC;
    FFT_output_M_imag_we0 : OUT STD_LOGIC;
    FFT_output_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    FFT_output_M_imag_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_output_M_imag_ce1 : OUT STD_LOGIC;
    FFT_output_M_imag_we1 : OUT STD_LOGIC;
    FFT_output_M_imag_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_8point is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft_8point,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.399750,HLS_SYN_LAT=221,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=20,HLS_SYN_FF=2282,HLS_SYN_LUT=4103,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rev8_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal rev8_ce0 : STD_LOGIC;
    signal rev8_q0 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln34_fu_161_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_185_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_213 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln5_fu_191_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln5_reg_218 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln4_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal FFT_rev_M_real_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal FFT_rev_M_real_ce0 : STD_LOGIC;
    signal FFT_rev_M_real_we0 : STD_LOGIC;
    signal FFT_rev_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_rev_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_rev_M_real_ce1 : STD_LOGIC;
    signal FFT_rev_M_real_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_rev_M_imag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal FFT_rev_M_imag_ce0 : STD_LOGIC;
    signal FFT_rev_M_imag_we0 : STD_LOGIC;
    signal FFT_rev_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_rev_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_rev_M_imag_ce1 : STD_LOGIC;
    signal FFT_rev_M_imag_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT_stages_fu_151_ap_start : STD_LOGIC;
    signal grp_FFT_stages_fu_151_ap_done : STD_LOGIC;
    signal grp_FFT_stages_fu_151_ap_idle : STD_LOGIC;
    signal grp_FFT_stages_fu_151_ap_ready : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_input_M_real_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FFT_stages_fu_151_FFT_input_M_real_ce0 : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_input_M_real_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FFT_stages_fu_151_FFT_input_M_real_ce1 : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_input_M_imag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FFT_stages_fu_151_FFT_input_M_imag_ce0 : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_input_M_imag_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FFT_stages_fu_151_FFT_input_M_imag_ce1 : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_output_M_real_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FFT_stages_fu_151_FFT_output_M_real_ce0 : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_output_M_real_we0 : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_output_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT_stages_fu_151_FFT_output_M_real_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FFT_stages_fu_151_FFT_output_M_real_ce1 : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_output_M_real_we1 : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_output_M_real_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT_stages_fu_151_FFT_output_M_imag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FFT_stages_fu_151_FFT_output_M_imag_ce0 : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_output_M_imag_we0 : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_output_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_FFT_stages_fu_151_FFT_output_M_imag_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_FFT_stages_fu_151_FFT_output_M_imag_ce1 : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_output_M_imag_we1 : STD_LOGIC;
    signal grp_FFT_stages_fu_151_FFT_output_M_imag_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln34_reg_129 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln34_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_i_reg_140 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_FFT_stages_fu_151_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln34_fu_167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln5_1_fu_196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component FFT_stages IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        FFT_input_M_real_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        FFT_input_M_real_ce0 : OUT STD_LOGIC;
        FFT_input_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        FFT_input_M_real_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        FFT_input_M_real_ce1 : OUT STD_LOGIC;
        FFT_input_M_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        FFT_input_M_imag_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        FFT_input_M_imag_ce0 : OUT STD_LOGIC;
        FFT_input_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        FFT_input_M_imag_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        FFT_input_M_imag_ce1 : OUT STD_LOGIC;
        FFT_input_M_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        FFT_output_M_real_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        FFT_output_M_real_ce0 : OUT STD_LOGIC;
        FFT_output_M_real_we0 : OUT STD_LOGIC;
        FFT_output_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        FFT_output_M_real_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        FFT_output_M_real_ce1 : OUT STD_LOGIC;
        FFT_output_M_real_we1 : OUT STD_LOGIC;
        FFT_output_M_real_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        FFT_output_M_imag_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        FFT_output_M_imag_ce0 : OUT STD_LOGIC;
        FFT_output_M_imag_we0 : OUT STD_LOGIC;
        FFT_output_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        FFT_output_M_imag_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
        FFT_output_M_imag_ce1 : OUT STD_LOGIC;
        FFT_output_M_imag_we1 : OUT STD_LOGIC;
        FFT_output_M_imag_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_8point_rev8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component fft_8point_FFT_rev_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    rev8_U : component fft_8point_rev8
    generic map (
        DataWidth => 3,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rev8_address0,
        ce0 => rev8_ce0,
        q0 => rev8_q0);

    FFT_rev_M_real_U : component fft_8point_FFT_rev_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FFT_rev_M_real_address0,
        ce0 => FFT_rev_M_real_ce0,
        we0 => FFT_rev_M_real_we0,
        d0 => FFT_rev_M_real_d0,
        q0 => FFT_rev_M_real_q0,
        address1 => grp_FFT_stages_fu_151_FFT_input_M_real_address1,
        ce1 => FFT_rev_M_real_ce1,
        q1 => FFT_rev_M_real_q1);

    FFT_rev_M_imag_U : component fft_8point_FFT_rev_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FFT_rev_M_imag_address0,
        ce0 => FFT_rev_M_imag_ce0,
        we0 => FFT_rev_M_imag_we0,
        d0 => FFT_rev_M_imag_d0,
        q0 => FFT_rev_M_imag_q0,
        address1 => grp_FFT_stages_fu_151_FFT_input_M_imag_address1,
        ce1 => FFT_rev_M_imag_ce1,
        q1 => FFT_rev_M_imag_q1);

    grp_FFT_stages_fu_151 : component FFT_stages
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_FFT_stages_fu_151_ap_start,
        ap_done => grp_FFT_stages_fu_151_ap_done,
        ap_idle => grp_FFT_stages_fu_151_ap_idle,
        ap_ready => grp_FFT_stages_fu_151_ap_ready,
        FFT_input_M_real_address0 => grp_FFT_stages_fu_151_FFT_input_M_real_address0,
        FFT_input_M_real_ce0 => grp_FFT_stages_fu_151_FFT_input_M_real_ce0,
        FFT_input_M_real_q0 => FFT_rev_M_real_q0,
        FFT_input_M_real_address1 => grp_FFT_stages_fu_151_FFT_input_M_real_address1,
        FFT_input_M_real_ce1 => grp_FFT_stages_fu_151_FFT_input_M_real_ce1,
        FFT_input_M_real_q1 => FFT_rev_M_real_q1,
        FFT_input_M_imag_address0 => grp_FFT_stages_fu_151_FFT_input_M_imag_address0,
        FFT_input_M_imag_ce0 => grp_FFT_stages_fu_151_FFT_input_M_imag_ce0,
        FFT_input_M_imag_q0 => FFT_rev_M_imag_q0,
        FFT_input_M_imag_address1 => grp_FFT_stages_fu_151_FFT_input_M_imag_address1,
        FFT_input_M_imag_ce1 => grp_FFT_stages_fu_151_FFT_input_M_imag_ce1,
        FFT_input_M_imag_q1 => FFT_rev_M_imag_q1,
        FFT_output_M_real_address0 => grp_FFT_stages_fu_151_FFT_output_M_real_address0,
        FFT_output_M_real_ce0 => grp_FFT_stages_fu_151_FFT_output_M_real_ce0,
        FFT_output_M_real_we0 => grp_FFT_stages_fu_151_FFT_output_M_real_we0,
        FFT_output_M_real_d0 => grp_FFT_stages_fu_151_FFT_output_M_real_d0,
        FFT_output_M_real_address1 => grp_FFT_stages_fu_151_FFT_output_M_real_address1,
        FFT_output_M_real_ce1 => grp_FFT_stages_fu_151_FFT_output_M_real_ce1,
        FFT_output_M_real_we1 => grp_FFT_stages_fu_151_FFT_output_M_real_we1,
        FFT_output_M_real_d1 => grp_FFT_stages_fu_151_FFT_output_M_real_d1,
        FFT_output_M_imag_address0 => grp_FFT_stages_fu_151_FFT_output_M_imag_address0,
        FFT_output_M_imag_ce0 => grp_FFT_stages_fu_151_FFT_output_M_imag_ce0,
        FFT_output_M_imag_we0 => grp_FFT_stages_fu_151_FFT_output_M_imag_we0,
        FFT_output_M_imag_d0 => grp_FFT_stages_fu_151_FFT_output_M_imag_d0,
        FFT_output_M_imag_address1 => grp_FFT_stages_fu_151_FFT_output_M_imag_address1,
        FFT_output_M_imag_ce1 => grp_FFT_stages_fu_151_FFT_output_M_imag_ce1,
        FFT_output_M_imag_we1 => grp_FFT_stages_fu_151_FFT_output_M_imag_we1,
        FFT_output_M_imag_d1 => grp_FFT_stages_fu_151_FFT_output_M_imag_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_FFT_stages_fu_151_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_FFT_stages_fu_151_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln4_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_FFT_stages_fu_151_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_FFT_stages_fu_151_ap_ready = ap_const_logic_1)) then 
                    grp_FFT_stages_fu_151_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln34_fu_173_p2 = ap_const_lv1_1))) then 
                i_0_i_reg_140 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_i_reg_140 <= i_reg_213;
            end if; 
        end if;
    end process;

    phi_ln34_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_fu_173_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln34_reg_129 <= add_ln34_fu_161_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln34_reg_129 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_213 <= i_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln4_fu_179_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln5_reg_218(3 downto 0) <= zext_ln5_fu_191_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln5_reg_218(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln4_fu_179_p2, grp_FFT_stages_fu_151_ap_done, icmp_ln34_fu_173_p2, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln34_fu_173_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln4_fu_179_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_FFT_stages_fu_151_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    FFT_input_M_imag_address0 <= zext_ln5_1_fu_196_p1(3 - 1 downto 0);

    FFT_input_M_imag_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            FFT_input_M_imag_ce0 <= ap_const_logic_1;
        else 
            FFT_input_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FFT_input_M_real_address0 <= zext_ln5_1_fu_196_p1(3 - 1 downto 0);

    FFT_input_M_real_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            FFT_input_M_real_ce0 <= ap_const_logic_1;
        else 
            FFT_input_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    FFT_output_M_imag_address0 <= grp_FFT_stages_fu_151_FFT_output_M_imag_address0;
    FFT_output_M_imag_address1 <= grp_FFT_stages_fu_151_FFT_output_M_imag_address1;
    FFT_output_M_imag_ce0 <= grp_FFT_stages_fu_151_FFT_output_M_imag_ce0;
    FFT_output_M_imag_ce1 <= grp_FFT_stages_fu_151_FFT_output_M_imag_ce1;
    FFT_output_M_imag_d0 <= grp_FFT_stages_fu_151_FFT_output_M_imag_d0;
    FFT_output_M_imag_d1 <= grp_FFT_stages_fu_151_FFT_output_M_imag_d1;
    FFT_output_M_imag_we0 <= grp_FFT_stages_fu_151_FFT_output_M_imag_we0;
    FFT_output_M_imag_we1 <= grp_FFT_stages_fu_151_FFT_output_M_imag_we1;
    FFT_output_M_real_address0 <= grp_FFT_stages_fu_151_FFT_output_M_real_address0;
    FFT_output_M_real_address1 <= grp_FFT_stages_fu_151_FFT_output_M_real_address1;
    FFT_output_M_real_ce0 <= grp_FFT_stages_fu_151_FFT_output_M_real_ce0;
    FFT_output_M_real_ce1 <= grp_FFT_stages_fu_151_FFT_output_M_real_ce1;
    FFT_output_M_real_d0 <= grp_FFT_stages_fu_151_FFT_output_M_real_d0;
    FFT_output_M_real_d1 <= grp_FFT_stages_fu_151_FFT_output_M_real_d1;
    FFT_output_M_real_we0 <= grp_FFT_stages_fu_151_FFT_output_M_real_we0;
    FFT_output_M_real_we1 <= grp_FFT_stages_fu_151_FFT_output_M_real_we1;

    FFT_rev_M_imag_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln5_reg_218, grp_FFT_stages_fu_151_FFT_input_M_imag_address0, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln34_fu_167_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            FFT_rev_M_imag_address0 <= zext_ln5_reg_218(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFT_rev_M_imag_address0 <= zext_ln34_fu_167_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            FFT_rev_M_imag_address0 <= grp_FFT_stages_fu_151_FFT_input_M_imag_address0;
        else 
            FFT_rev_M_imag_address0 <= "XXX";
        end if; 
    end process;


    FFT_rev_M_imag_ce0_assign_proc : process(ap_CS_fsm_state2, grp_FFT_stages_fu_151_FFT_input_M_imag_ce0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            FFT_rev_M_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            FFT_rev_M_imag_ce0 <= grp_FFT_stages_fu_151_FFT_input_M_imag_ce0;
        else 
            FFT_rev_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_rev_M_imag_ce1_assign_proc : process(grp_FFT_stages_fu_151_FFT_input_M_imag_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            FFT_rev_M_imag_ce1 <= grp_FFT_stages_fu_151_FFT_input_M_imag_ce1;
        else 
            FFT_rev_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_rev_M_imag_d0_assign_proc : process(FFT_input_M_imag_q0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            FFT_rev_M_imag_d0 <= FFT_input_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFT_rev_M_imag_d0 <= ap_const_lv32_0;
        else 
            FFT_rev_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    FFT_rev_M_imag_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            FFT_rev_M_imag_we0 <= ap_const_logic_1;
        else 
            FFT_rev_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_rev_M_real_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln5_reg_218, grp_FFT_stages_fu_151_FFT_input_M_real_address0, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln34_fu_167_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            FFT_rev_M_real_address0 <= zext_ln5_reg_218(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFT_rev_M_real_address0 <= zext_ln34_fu_167_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            FFT_rev_M_real_address0 <= grp_FFT_stages_fu_151_FFT_input_M_real_address0;
        else 
            FFT_rev_M_real_address0 <= "XXX";
        end if; 
    end process;


    FFT_rev_M_real_ce0_assign_proc : process(ap_CS_fsm_state2, grp_FFT_stages_fu_151_FFT_input_M_real_ce0, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            FFT_rev_M_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            FFT_rev_M_real_ce0 <= grp_FFT_stages_fu_151_FFT_input_M_real_ce0;
        else 
            FFT_rev_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_rev_M_real_ce1_assign_proc : process(grp_FFT_stages_fu_151_FFT_input_M_real_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            FFT_rev_M_real_ce1 <= grp_FFT_stages_fu_151_FFT_input_M_real_ce1;
        else 
            FFT_rev_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_rev_M_real_d0_assign_proc : process(FFT_input_M_real_q0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            FFT_rev_M_real_d0 <= FFT_input_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFT_rev_M_real_d0 <= ap_const_lv32_0;
        else 
            FFT_rev_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    FFT_rev_M_real_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            FFT_rev_M_real_we0 <= ap_const_logic_1;
        else 
            FFT_rev_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln34_fu_161_p2 <= std_logic_vector(unsigned(phi_ln34_reg_129) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(grp_FFT_stages_fu_151_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_FFT_stages_fu_151_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_FFT_stages_fu_151_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_FFT_stages_fu_151_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_FFT_stages_fu_151_ap_start <= grp_FFT_stages_fu_151_ap_start_reg;
    i_fu_185_p2 <= std_logic_vector(unsigned(i_0_i_reg_140) + unsigned(ap_const_lv4_1));
    icmp_ln34_fu_173_p2 <= "1" when (phi_ln34_reg_129 = ap_const_lv3_7) else "0";
    icmp_ln4_fu_179_p2 <= "1" when (i_0_i_reg_140 = ap_const_lv4_8) else "0";
    rev8_address0 <= zext_ln5_fu_191_p1(3 - 1 downto 0);

    rev8_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            rev8_ce0 <= ap_const_logic_1;
        else 
            rev8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln34_fu_167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln34_reg_129),64));
    zext_ln5_1_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rev8_q0),64));
    zext_ln5_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_140),64));
end behav;
