-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity FFT_stages is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    FFT_input_real_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_input_real_ce0 : OUT STD_LOGIC;
    FFT_input_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_input_real_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_input_real_ce1 : OUT STD_LOGIC;
    FFT_input_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_input_imag_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_input_imag_ce0 : OUT STD_LOGIC;
    FFT_input_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_input_imag_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_input_imag_ce1 : OUT STD_LOGIC;
    FFT_input_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    FFT_output_real_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_output_real_ce0 : OUT STD_LOGIC;
    FFT_output_real_we0 : OUT STD_LOGIC;
    FFT_output_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    FFT_output_real_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_output_real_ce1 : OUT STD_LOGIC;
    FFT_output_real_we1 : OUT STD_LOGIC;
    FFT_output_real_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    FFT_output_imag_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_output_imag_ce0 : OUT STD_LOGIC;
    FFT_output_imag_we0 : OUT STD_LOGIC;
    FFT_output_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    FFT_output_imag_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    FFT_output_imag_ce1 : OUT STD_LOGIC;
    FFT_output_imag_we1 : OUT STD_LOGIC;
    FFT_output_imag_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of FFT_stages is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_3F3504F3 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001101010000010011110011";
    constant ap_const_lv32_BF3504F3 : STD_LOGIC_VECTOR (31 downto 0) := "10111111001101010000010011110011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_383_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal temp1_real_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp1_imag_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_391_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_470 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_475 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_480 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_485 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal temp2_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_493 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln29_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_708 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_27_fu_501_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln29_1_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_1_reg_724 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_531_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_740 : STD_LOGIC_VECTOR (3 downto 0);
    signal FFT_input_real_load_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal FFT_input_imag_load_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_input_real_load_1_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_input_imag_load_1_reg_763 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln36_2_fu_555_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln36_2_reg_772 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_28_fu_537_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_569_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_780 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_24_reg_785 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln35_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_1_fu_590_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_1_reg_790 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_fu_596_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_fu_606_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln36_1_fu_616_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln36_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_reg_823 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal i_4_fu_645_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_reg_842 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal zext_ln43_1_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_1_reg_847 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln42_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_667_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_683_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln43_fu_699_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln43_reg_875 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal temp1_real_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp1_real_ce0 : STD_LOGIC;
    signal temp1_real_we0 : STD_LOGIC;
    signal temp1_real_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp1_real_ce1 : STD_LOGIC;
    signal temp1_real_we1 : STD_LOGIC;
    signal temp1_imag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp1_imag_ce0 : STD_LOGIC;
    signal temp1_imag_we0 : STD_LOGIC;
    signal temp1_imag_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp1_imag_ce1 : STD_LOGIC;
    signal temp1_imag_we1 : STD_LOGIC;
    signal temp2_real_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp2_real_ce0 : STD_LOGIC;
    signal temp2_real_we0 : STD_LOGIC;
    signal temp2_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp2_imag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp2_imag_ce0 : STD_LOGIC;
    signal temp2_imag_we0 : STD_LOGIC;
    signal temp2_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_328 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_1_reg_339 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_351 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_2_reg_363 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_375_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_375_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_379_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_383_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_387_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_391_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_391_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_396_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_406_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln28_fu_515_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln29_fu_519_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln34_fu_545_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln36_fu_549_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_fu_559_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln36_fu_585_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln36_fu_602_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln_fu_626_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln43_fu_651_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln43_fu_663_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_375_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);

    component FFT_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_stages_temp1_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component FFT_stages_temp2_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    temp1_real_U : component FFT_stages_temp1_real
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp1_real_address0,
        ce0 => temp1_real_ce0,
        we0 => temp1_real_we0,
        d0 => reg_415,
        q0 => temp1_real_q0,
        address1 => temp1_real_address1,
        ce1 => temp1_real_ce1,
        we1 => temp1_real_we1,
        d1 => reg_433,
        q1 => temp1_real_q1);

    temp1_imag_U : component FFT_stages_temp1_real
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp1_imag_address0,
        ce0 => temp1_imag_ce0,
        we0 => temp1_imag_we0,
        d0 => reg_424,
        q0 => temp1_imag_q0,
        address1 => temp1_imag_address1,
        ce1 => temp1_imag_ce1,
        we1 => temp1_imag_we1,
        d1 => reg_440,
        q1 => temp1_imag_q1);

    temp2_real_U : component FFT_stages_temp2_real
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp2_real_address0,
        ce0 => temp2_real_ce0,
        we0 => temp2_real_we0,
        d0 => temp2_real_d0,
        q0 => temp2_real_q0);

    temp2_imag_U : component FFT_stages_temp2_real
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp2_imag_address0,
        ce0 => temp2_imag_ce0,
        we0 => temp2_imag_we0,
        d0 => temp2_imag_d0,
        q0 => temp2_imag_q0);

    FFT_faddfsub_32ns_32ns_32_5_full_dsp_1_U1 : component FFT_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_375_p0,
        din1 => grp_fu_375_p1,
        opcode => grp_fu_375_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_375_p2);

    FFT_fadd_32ns_32ns_32_5_full_dsp_1_U2 : component FFT_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_379_p0,
        din1 => grp_fu_379_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_379_p2);

    FFT_fsub_32ns_32ns_32_5_full_dsp_1_U3 : component FFT_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_383_p0,
        din1 => grp_fu_383_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_383_p2);

    FFT_fsub_32ns_32ns_32_5_full_dsp_1_U4 : component FFT_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_387_p0,
        din1 => grp_fu_387_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_387_p2);

    FFT_fmul_32ns_32ns_32_4_max_dsp_1_U5 : component FFT_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_391_p0,
        din1 => grp_fu_391_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_391_p2);

    FFT_fmul_32ns_32ns_32_4_max_dsp_1_U6 : component FFT_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_396_p0,
        din1 => grp_fu_396_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_396_p2);

    FFT_fmul_32ns_32ns_32_4_max_dsp_1_U7 : component FFT_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_401_p0,
        din1 => grp_fu_401_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_401_p2);

    FFT_fmul_32ns_32ns_32_4_max_dsp_1_U8 : component FFT_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_406_p0,
        din1 => grp_fu_406_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_406_p2);

    FFT_mux_42_32_1_1_U9 : component FFT_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_3F800000,
        din1 => ap_const_lv32_3F3504F3,
        din2 => ap_const_lv32_0,
        din3 => ap_const_lv32_BF3504F3,
        din4 => trunc_ln43_fu_663_p1,
        dout => tmp_25_fu_667_p6);

    FFT_mux_42_32_1_1_U10 : component FFT_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_BF3504F3,
        din2 => ap_const_lv32_BF800000,
        din3 => ap_const_lv32_BF3504F3,
        din4 => trunc_ln43_fu_663_p1,
        dout => tmp_26_fu_683_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_0_reg_328 <= i_reg_740;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_328 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_27_fu_501_p3 = ap_const_lv1_1))) then 
                i_1_reg_339 <= ap_const_lv4_0;
            elsif (((icmp_ln35_fu_563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_1_reg_339 <= i_5_fu_596_p2;
            end if; 
        end if;
    end process;

    i_2_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_28_fu_537_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_2_reg_363 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i_2_reg_363 <= i_4_reg_842;
            end if; 
        end if;
    end process;

    j_0_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                j_0_reg_351 <= j_reg_780;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_28_fu_537_p3 = ap_const_lv1_0))) then 
                j_0_reg_351 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    reg_447_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                reg_447 <= temp1_real_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_447 <= temp1_real_q0;
            end if; 
        end if;
    end process;

    reg_456_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                reg_456 <= temp1_imag_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_456 <= temp1_imag_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                FFT_input_imag_load_1_reg_763 <= FFT_input_imag_q1;
                FFT_input_imag_load_reg_751 <= FFT_input_imag_q0;
                FFT_input_real_load_1_reg_757 <= FFT_input_real_q1;
                FFT_input_real_load_reg_745 <= FFT_input_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                i_4_reg_842 <= i_4_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_27_fu_501_p3 = ap_const_lv1_0))) then
                i_reg_740 <= i_fu_531_p2;
                    zext_ln29_1_reg_724(2 downto 1) <= zext_ln29_1_fu_525_p1(2 downto 1);
                    zext_ln29_reg_708(3 downto 0) <= zext_ln29_fu_509_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                j_reg_780 <= j_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_415 <= grp_fu_375_p2;
                reg_424 <= grp_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_433 <= grp_fu_383_p2;
                reg_440 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_465 <= grp_fu_391_p2;
                reg_470 <= grp_fu_396_p2;
                reg_475 <= grp_fu_401_p2;
                reg_480 <= grp_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state37))) then
                reg_485 <= temp2_real_q0;
                reg_493 <= temp2_imag_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln35_fu_563_p2 = ap_const_lv1_0))) then
                tmp_24_reg_785 <= i_1_reg_339(3 downto 2);
                    zext_ln36_1_reg_790(3 downto 0) <= zext_ln36_1_fu_590_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_28_fu_537_p3 = ap_const_lv1_0))) then
                    zext_ln36_2_reg_772(0) <= zext_ln36_2_fu_555_p1(0);    zext_ln36_2_reg_772(2) <= zext_ln36_2_fu_555_p1(2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                    zext_ln36_reg_823(3 downto 0) <= zext_ln36_fu_633_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (icmp_ln42_fu_639_p2 = ap_const_lv1_0))) then
                    zext_ln43_1_reg_847(2 downto 0) <= zext_ln43_1_fu_657_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                    zext_ln43_reg_875(2 downto 0) <= zext_ln43_fu_699_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln29_reg_708(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_1_reg_724(0) <= '1';
    zext_ln29_1_reg_724(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln36_2_reg_772(1) <= '1';
    zext_ln36_2_reg_772(3) <= '0';
    zext_ln36_1_reg_790(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln36_reg_823(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln43_1_reg_847(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln43_reg_875(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_27_fu_501_p3, ap_CS_fsm_state10, tmp_28_fu_537_p3, ap_CS_fsm_state11, icmp_ln35_fu_563_p2, ap_CS_fsm_state28, icmp_ln42_fu_639_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_27_fu_501_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state10 => 
                if (((tmp_28_fu_537_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln35_fu_563_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln42_fu_639_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    FFT_input_imag_address0 <= zext_ln29_fu_509_p1(3 - 1 downto 0);
    FFT_input_imag_address1 <= zext_ln29_1_fu_525_p1(3 - 1 downto 0);

    FFT_input_imag_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFT_input_imag_ce0 <= ap_const_logic_1;
        else 
            FFT_input_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_input_imag_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFT_input_imag_ce1 <= ap_const_logic_1;
        else 
            FFT_input_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    FFT_input_real_address0 <= zext_ln29_fu_509_p1(3 - 1 downto 0);
    FFT_input_real_address1 <= zext_ln29_1_fu_525_p1(3 - 1 downto 0);

    FFT_input_real_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFT_input_real_ce0 <= ap_const_logic_1;
        else 
            FFT_input_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_input_real_ce1_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFT_input_real_ce1 <= ap_const_logic_1;
        else 
            FFT_input_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    FFT_output_imag_address0 <= zext_ln43_reg_875(3 - 1 downto 0);
    FFT_output_imag_address1 <= zext_ln43_1_reg_847(3 - 1 downto 0);

    FFT_output_imag_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            FFT_output_imag_ce0 <= ap_const_logic_1;
        else 
            FFT_output_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_output_imag_ce1_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            FFT_output_imag_ce1 <= ap_const_logic_1;
        else 
            FFT_output_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    FFT_output_imag_d0 <= reg_424;
    FFT_output_imag_d1 <= reg_440;

    FFT_output_imag_we0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            FFT_output_imag_we0 <= ap_const_logic_1;
        else 
            FFT_output_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_output_imag_we1_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            FFT_output_imag_we1 <= ap_const_logic_1;
        else 
            FFT_output_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;

    FFT_output_real_address0 <= zext_ln43_reg_875(3 - 1 downto 0);
    FFT_output_real_address1 <= zext_ln43_1_reg_847(3 - 1 downto 0);

    FFT_output_real_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            FFT_output_real_ce0 <= ap_const_logic_1;
        else 
            FFT_output_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_output_real_ce1_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            FFT_output_real_ce1 <= ap_const_logic_1;
        else 
            FFT_output_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    FFT_output_real_d0 <= reg_415;
    FFT_output_real_d1 <= reg_433;

    FFT_output_real_we0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            FFT_output_real_we0 <= ap_const_logic_1;
        else 
            FFT_output_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_output_real_we1_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            FFT_output_real_we1 <= ap_const_logic_1;
        else 
            FFT_output_real_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln36_fu_585_p2 <= std_logic_vector(unsigned(zext_ln35_fu_559_p1) + unsigned(zext_ln36_2_reg_772));
    add_ln_fu_626_p3 <= (tmp_24_reg_785 & j_0_reg_351);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state28, icmp_ln42_fu_639_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln42_fu_639_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28, icmp_ln42_fu_639_p2)
    begin
        if (((icmp_ln42_fu_639_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_375_opcode_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state21, ap_CS_fsm_state33, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_375_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_375_opcode <= ap_const_lv2_0;
        else 
            grp_fu_375_opcode <= "XX";
        end if; 
    end process;


    grp_fu_375_p0_assign_proc : process(reg_447, reg_465, reg_485, FFT_input_real_load_reg_745, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state21, ap_CS_fsm_state33, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_375_p0 <= reg_485;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_375_p0 <= reg_447;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_375_p0 <= reg_465;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_375_p0 <= FFT_input_real_load_reg_745;
        else 
            grp_fu_375_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_375_p1_assign_proc : process(reg_415, reg_470, FFT_input_real_load_1_reg_757, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state21, ap_CS_fsm_state33, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_375_p1 <= reg_415;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_375_p1 <= reg_470;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_375_p1 <= FFT_input_real_load_1_reg_757;
        else 
            grp_fu_375_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_379_p0_assign_proc : process(reg_456, reg_475, reg_493, FFT_input_imag_load_reg_751, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state21, ap_CS_fsm_state33, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_379_p0 <= reg_493;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_379_p0 <= reg_456;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_379_p0 <= reg_475;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_379_p0 <= FFT_input_imag_load_reg_751;
        else 
            grp_fu_379_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_379_p1_assign_proc : process(reg_424, reg_480, FFT_input_imag_load_1_reg_763, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state21, ap_CS_fsm_state33, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_379_p1 <= reg_424;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            grp_fu_379_p1 <= reg_480;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_379_p1 <= FFT_input_imag_load_1_reg_763;
        else 
            grp_fu_379_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_383_p0_assign_proc : process(reg_447, reg_485, FFT_input_real_load_reg_745, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_383_p0 <= reg_485;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_383_p0 <= reg_447;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_383_p0 <= FFT_input_real_load_reg_745;
        else 
            grp_fu_383_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_383_p1_assign_proc : process(reg_415, FFT_input_real_load_1_reg_757, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_383_p1 <= reg_415;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_383_p1 <= FFT_input_real_load_1_reg_757;
        else 
            grp_fu_383_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_387_p0_assign_proc : process(reg_456, reg_493, FFT_input_imag_load_reg_751, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_387_p0 <= reg_493;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_387_p0 <= reg_456;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_387_p0 <= FFT_input_imag_load_reg_751;
        else 
            grp_fu_387_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_387_p1_assign_proc : process(reg_424, FFT_input_imag_load_1_reg_763, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_387_p1 <= reg_424;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_387_p1 <= FFT_input_imag_load_1_reg_763;
        else 
            grp_fu_387_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_391_p0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state29, select_ln36_fu_606_p3, tmp_25_fu_667_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_391_p0 <= tmp_25_fu_667_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_391_p0 <= select_ln36_fu_606_p3;
        else 
            grp_fu_391_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_391_p1_assign_proc : process(temp1_real_q0, ap_CS_fsm_state12, temp2_real_q0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_391_p1 <= temp2_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_391_p1 <= temp1_real_q0;
        else 
            grp_fu_391_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_396_p0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state29, select_ln36_1_fu_616_p3, tmp_26_fu_683_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_396_p0 <= tmp_26_fu_683_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_396_p0 <= select_ln36_1_fu_616_p3;
        else 
            grp_fu_396_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_396_p1_assign_proc : process(ap_CS_fsm_state12, temp1_imag_q0, ap_CS_fsm_state29, temp2_imag_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_396_p1 <= temp2_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_396_p1 <= temp1_imag_q0;
        else 
            grp_fu_396_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_401_p0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state29, select_ln36_1_fu_616_p3, tmp_26_fu_683_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_401_p0 <= tmp_26_fu_683_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_401_p0 <= select_ln36_1_fu_616_p3;
        else 
            grp_fu_401_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_401_p1_assign_proc : process(temp1_real_q0, ap_CS_fsm_state12, temp2_real_q0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_401_p1 <= temp2_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_401_p1 <= temp1_real_q0;
        else 
            grp_fu_401_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_406_p0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state29, select_ln36_fu_606_p3, tmp_25_fu_667_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_406_p0 <= tmp_25_fu_667_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_406_p0 <= select_ln36_fu_606_p3;
        else 
            grp_fu_406_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_406_p1_assign_proc : process(ap_CS_fsm_state12, temp1_imag_q0, ap_CS_fsm_state29, temp2_imag_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_406_p1 <= temp2_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_406_p1 <= temp1_imag_q0;
        else 
            grp_fu_406_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_4_fu_645_p2 <= std_logic_vector(unsigned(i_2_reg_363) + unsigned(ap_const_lv3_1));
    i_5_fu_596_p2 <= std_logic_vector(unsigned(i_1_reg_339) + unsigned(ap_const_lv4_4));
    i_fu_531_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(i_0_reg_328));
    icmp_ln35_fu_563_p2 <= "1" when (j_0_reg_351 = ap_const_lv2_2) else "0";
    icmp_ln42_fu_639_p2 <= "1" when (i_2_reg_363 = ap_const_lv3_4) else "0";
    j_fu_569_p2 <= std_logic_vector(unsigned(j_0_reg_351) + unsigned(ap_const_lv2_1));
    or_ln29_fu_519_p2 <= (trunc_ln28_fu_515_p1 or ap_const_lv3_1);
    or_ln36_fu_549_p2 <= (trunc_ln34_fu_545_p1 or ap_const_lv3_2);
    select_ln36_1_fu_616_p3 <= 
        ap_const_lv32_BF800000 when (trunc_ln36_fu_602_p1(0) = '1') else 
        ap_const_lv32_0;
    select_ln36_fu_606_p3 <= 
        ap_const_lv32_0 when (trunc_ln36_fu_602_p1(0) = '1') else 
        ap_const_lv32_3F800000;

    temp1_imag_address0_assign_proc : process(zext_ln29_reg_708, ap_CS_fsm_state11, zext_ln36_1_fu_590_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp1_imag_address0 <= zext_ln36_1_fu_590_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp1_imag_address0 <= zext_ln29_reg_708(3 - 1 downto 0);
        else 
            temp1_imag_address0 <= "XXX";
        end if; 
    end process;


    temp1_imag_address1_assign_proc : process(zext_ln29_1_reg_724, zext_ln36_fu_633_p1, ap_CS_fsm_state19, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp1_imag_address1 <= zext_ln36_fu_633_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp1_imag_address1 <= zext_ln29_1_reg_724(3 - 1 downto 0);
        else 
            temp1_imag_address1 <= "XXX";
        end if; 
    end process;


    temp1_imag_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            temp1_imag_ce0 <= ap_const_logic_1;
        else 
            temp1_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_imag_ce1_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            temp1_imag_ce1 <= ap_const_logic_1;
        else 
            temp1_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_imag_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp1_imag_we0 <= ap_const_logic_1;
        else 
            temp1_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_imag_we1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp1_imag_we1 <= ap_const_logic_1;
        else 
            temp1_imag_we1 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_real_address0_assign_proc : process(zext_ln29_reg_708, ap_CS_fsm_state11, zext_ln36_1_fu_590_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp1_real_address0 <= zext_ln36_1_fu_590_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp1_real_address0 <= zext_ln29_reg_708(3 - 1 downto 0);
        else 
            temp1_real_address0 <= "XXX";
        end if; 
    end process;


    temp1_real_address1_assign_proc : process(zext_ln29_1_reg_724, zext_ln36_fu_633_p1, ap_CS_fsm_state19, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp1_real_address1 <= zext_ln36_fu_633_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp1_real_address1 <= zext_ln29_1_reg_724(3 - 1 downto 0);
        else 
            temp1_real_address1 <= "XXX";
        end if; 
    end process;


    temp1_real_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            temp1_real_ce0 <= ap_const_logic_1;
        else 
            temp1_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_real_ce1_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            temp1_real_ce1 <= ap_const_logic_1;
        else 
            temp1_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_real_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp1_real_we0 <= ap_const_logic_1;
        else 
            temp1_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp1_real_we1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp1_real_we1 <= ap_const_logic_1;
        else 
            temp1_real_we1 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_imag_address0_assign_proc : process(zext_ln36_1_reg_790, zext_ln36_reg_823, ap_CS_fsm_state28, zext_ln43_1_fu_657_p1, zext_ln43_fu_699_p1, ap_CS_fsm_state36, ap_CS_fsm_state27, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            temp2_imag_address0 <= zext_ln43_fu_699_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            temp2_imag_address0 <= zext_ln43_1_fu_657_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            temp2_imag_address0 <= zext_ln36_1_reg_790(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            temp2_imag_address0 <= zext_ln36_reg_823(3 - 1 downto 0);
        else 
            temp2_imag_address0 <= "XXX";
        end if; 
    end process;


    temp2_imag_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state36, ap_CS_fsm_state27, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            temp2_imag_ce0 <= ap_const_logic_1;
        else 
            temp2_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_imag_d0_assign_proc : process(reg_424, reg_440, ap_CS_fsm_state27, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            temp2_imag_d0 <= reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            temp2_imag_d0 <= reg_424;
        else 
            temp2_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp2_imag_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            temp2_imag_we0 <= ap_const_logic_1;
        else 
            temp2_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_real_address0_assign_proc : process(zext_ln36_1_reg_790, zext_ln36_reg_823, ap_CS_fsm_state28, zext_ln43_1_fu_657_p1, zext_ln43_fu_699_p1, ap_CS_fsm_state36, ap_CS_fsm_state27, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            temp2_real_address0 <= zext_ln43_fu_699_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            temp2_real_address0 <= zext_ln43_1_fu_657_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            temp2_real_address0 <= zext_ln36_1_reg_790(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            temp2_real_address0 <= zext_ln36_reg_823(3 - 1 downto 0);
        else 
            temp2_real_address0 <= "XXX";
        end if; 
    end process;


    temp2_real_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state36, ap_CS_fsm_state27, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            temp2_real_ce0 <= ap_const_logic_1;
        else 
            temp2_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp2_real_d0_assign_proc : process(reg_415, reg_433, ap_CS_fsm_state27, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            temp2_real_d0 <= reg_433;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            temp2_real_d0 <= reg_415;
        else 
            temp2_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp2_real_we0_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            temp2_real_we0 <= ap_const_logic_1;
        else 
            temp2_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_27_fu_501_p3 <= i_0_reg_328(3 downto 3);
    tmp_28_fu_537_p3 <= i_1_reg_339(3 downto 3);
    trunc_ln28_fu_515_p1 <= i_0_reg_328(3 - 1 downto 0);
    trunc_ln34_fu_545_p1 <= i_1_reg_339(3 - 1 downto 0);
    trunc_ln36_fu_602_p1 <= j_0_reg_351(1 - 1 downto 0);
    trunc_ln43_fu_663_p1 <= i_2_reg_363(2 - 1 downto 0);
    xor_ln43_fu_651_p2 <= (i_2_reg_363 xor ap_const_lv3_4);
    zext_ln29_1_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln29_fu_519_p2),64));
    zext_ln29_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_328),64));
    zext_ln35_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_351),4));
    zext_ln36_1_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_585_p2),64));
    zext_ln36_2_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln36_fu_549_p2),4));
    zext_ln36_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln_fu_626_p3),64));
    zext_ln43_1_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln43_fu_651_p2),64));
    zext_ln43_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_363),64));
end behav;
