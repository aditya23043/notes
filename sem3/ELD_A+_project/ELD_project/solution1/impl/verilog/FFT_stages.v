// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FFT_stages (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        FFT_input_real_address0,
        FFT_input_real_ce0,
        FFT_input_real_q0,
        FFT_input_real_address1,
        FFT_input_real_ce1,
        FFT_input_real_q1,
        FFT_input_imag_address0,
        FFT_input_imag_ce0,
        FFT_input_imag_q0,
        FFT_input_imag_address1,
        FFT_input_imag_ce1,
        FFT_input_imag_q1,
        FFT_output_real_address0,
        FFT_output_real_ce0,
        FFT_output_real_we0,
        FFT_output_real_d0,
        FFT_output_real_address1,
        FFT_output_real_ce1,
        FFT_output_real_we1,
        FFT_output_real_d1,
        FFT_output_imag_address0,
        FFT_output_imag_ce0,
        FFT_output_imag_we0,
        FFT_output_imag_d0,
        FFT_output_imag_address1,
        FFT_output_imag_ce1,
        FFT_output_imag_we1,
        FFT_output_imag_d1
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_state42 = 43'd2199023255552;
parameter    ap_ST_fsm_state43 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] FFT_input_real_address0;
output   FFT_input_real_ce0;
input  [31:0] FFT_input_real_q0;
output  [2:0] FFT_input_real_address1;
output   FFT_input_real_ce1;
input  [31:0] FFT_input_real_q1;
output  [2:0] FFT_input_imag_address0;
output   FFT_input_imag_ce0;
input  [31:0] FFT_input_imag_q0;
output  [2:0] FFT_input_imag_address1;
output   FFT_input_imag_ce1;
input  [31:0] FFT_input_imag_q1;
output  [2:0] FFT_output_real_address0;
output   FFT_output_real_ce0;
output   FFT_output_real_we0;
output  [31:0] FFT_output_real_d0;
output  [2:0] FFT_output_real_address1;
output   FFT_output_real_ce1;
output   FFT_output_real_we1;
output  [31:0] FFT_output_real_d1;
output  [2:0] FFT_output_imag_address0;
output   FFT_output_imag_ce0;
output   FFT_output_imag_we0;
output  [31:0] FFT_output_imag_d0;
output  [2:0] FFT_output_imag_address1;
output   FFT_output_imag_ce1;
output   FFT_output_imag_we1;
output  [31:0] FFT_output_imag_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg FFT_input_real_ce0;
reg FFT_input_real_ce1;
reg FFT_input_imag_ce0;
reg FFT_input_imag_ce1;
reg FFT_output_real_ce0;
reg FFT_output_real_we0;
reg FFT_output_real_ce1;
reg FFT_output_real_we1;
reg FFT_output_imag_ce0;
reg FFT_output_imag_we0;
reg FFT_output_imag_ce1;
reg FFT_output_imag_we1;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_375_p2;
reg   [31:0] reg_415;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state42;
wire   [31:0] grp_fu_379_p2;
reg   [31:0] reg_424;
wire   [31:0] grp_fu_383_p2;
reg   [31:0] reg_433;
wire   [31:0] grp_fu_387_p2;
reg   [31:0] reg_440;
wire   [31:0] temp1_real_q0;
reg   [31:0] reg_447;
wire    ap_CS_fsm_state12;
wire   [31:0] temp1_real_q1;
wire   [31:0] temp1_imag_q0;
reg   [31:0] reg_456;
wire   [31:0] temp1_imag_q1;
wire   [31:0] grp_fu_391_p2;
reg   [31:0] reg_465;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state32;
wire   [31:0] grp_fu_396_p2;
reg   [31:0] reg_470;
wire   [31:0] grp_fu_401_p2;
reg   [31:0] reg_475;
wire   [31:0] grp_fu_406_p2;
reg   [31:0] reg_480;
wire   [31:0] temp2_real_q0;
reg   [31:0] reg_485;
wire    ap_CS_fsm_state29;
wire   [31:0] temp2_imag_q0;
reg   [31:0] reg_493;
wire   [63:0] zext_ln29_fu_509_p1;
reg   [63:0] zext_ln29_reg_708;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_27_fu_501_p3;
wire   [63:0] zext_ln29_1_fu_525_p1;
reg   [63:0] zext_ln29_1_reg_724;
wire   [3:0] i_fu_531_p2;
reg   [3:0] i_reg_740;
reg   [31:0] FFT_input_real_load_reg_745;
wire    ap_CS_fsm_state3;
reg   [31:0] FFT_input_imag_load_reg_751;
reg   [31:0] FFT_input_real_load_1_reg_757;
reg   [31:0] FFT_input_imag_load_1_reg_763;
wire   [3:0] zext_ln36_2_fu_555_p1;
reg   [3:0] zext_ln36_2_reg_772;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_28_fu_537_p3;
wire   [1:0] j_fu_569_p2;
reg   [1:0] j_reg_780;
wire    ap_CS_fsm_state11;
reg   [1:0] tmp_24_reg_785;
wire   [0:0] icmp_ln35_fu_563_p2;
wire   [63:0] zext_ln36_1_fu_590_p1;
reg   [63:0] zext_ln36_1_reg_790;
wire   [3:0] i_5_fu_596_p2;
wire   [31:0] select_ln36_fu_606_p3;
wire   [31:0] select_ln36_1_fu_616_p3;
wire   [63:0] zext_ln36_fu_633_p1;
reg   [63:0] zext_ln36_reg_823;
wire    ap_CS_fsm_state19;
wire   [2:0] i_4_fu_645_p2;
reg   [2:0] i_4_reg_842;
wire    ap_CS_fsm_state28;
wire   [63:0] zext_ln43_1_fu_657_p1;
reg   [63:0] zext_ln43_1_reg_847;
wire   [0:0] icmp_ln42_fu_639_p2;
wire   [31:0] tmp_25_fu_667_p6;
wire   [31:0] tmp_26_fu_683_p6;
wire   [63:0] zext_ln43_fu_699_p1;
reg   [63:0] zext_ln43_reg_875;
wire    ap_CS_fsm_state36;
reg   [2:0] temp1_real_address0;
reg    temp1_real_ce0;
reg    temp1_real_we0;
reg   [2:0] temp1_real_address1;
reg    temp1_real_ce1;
reg    temp1_real_we1;
reg   [2:0] temp1_imag_address0;
reg    temp1_imag_ce0;
reg    temp1_imag_we0;
reg   [2:0] temp1_imag_address1;
reg    temp1_imag_ce1;
reg    temp1_imag_we1;
reg   [2:0] temp2_real_address0;
reg    temp2_real_ce0;
reg    temp2_real_we0;
reg   [31:0] temp2_real_d0;
reg   [2:0] temp2_imag_address0;
reg    temp2_imag_ce0;
reg    temp2_imag_we0;
reg   [31:0] temp2_imag_d0;
reg   [3:0] i_0_reg_328;
wire    ap_CS_fsm_state9;
reg   [3:0] i_1_reg_339;
reg   [1:0] j_0_reg_351;
wire    ap_CS_fsm_state27;
reg   [2:0] i_2_reg_363;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state26;
reg   [31:0] grp_fu_375_p0;
reg   [31:0] grp_fu_375_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state38;
reg   [31:0] grp_fu_379_p0;
reg   [31:0] grp_fu_379_p1;
reg   [31:0] grp_fu_383_p0;
reg   [31:0] grp_fu_383_p1;
reg   [31:0] grp_fu_387_p0;
reg   [31:0] grp_fu_387_p1;
reg   [31:0] grp_fu_391_p0;
reg   [31:0] grp_fu_391_p1;
reg   [31:0] grp_fu_396_p0;
reg   [31:0] grp_fu_396_p1;
reg   [31:0] grp_fu_401_p0;
reg   [31:0] grp_fu_401_p1;
reg   [31:0] grp_fu_406_p0;
reg   [31:0] grp_fu_406_p1;
wire   [2:0] trunc_ln28_fu_515_p1;
wire   [2:0] or_ln29_fu_519_p2;
wire   [2:0] trunc_ln34_fu_545_p1;
wire   [2:0] or_ln36_fu_549_p2;
wire   [3:0] zext_ln35_fu_559_p1;
wire   [3:0] add_ln36_fu_585_p2;
wire   [0:0] trunc_ln36_fu_602_p1;
wire   [3:0] add_ln_fu_626_p3;
wire   [2:0] xor_ln43_fu_651_p2;
wire   [1:0] trunc_ln43_fu_663_p1;
reg   [1:0] grp_fu_375_opcode;
reg   [42:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
end

FFT_stages_temp1_real #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp1_real_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp1_real_address0),
    .ce0(temp1_real_ce0),
    .we0(temp1_real_we0),
    .d0(reg_415),
    .q0(temp1_real_q0),
    .address1(temp1_real_address1),
    .ce1(temp1_real_ce1),
    .we1(temp1_real_we1),
    .d1(reg_433),
    .q1(temp1_real_q1)
);

FFT_stages_temp1_real #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp1_imag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp1_imag_address0),
    .ce0(temp1_imag_ce0),
    .we0(temp1_imag_we0),
    .d0(reg_424),
    .q0(temp1_imag_q0),
    .address1(temp1_imag_address1),
    .ce1(temp1_imag_ce1),
    .we1(temp1_imag_we1),
    .d1(reg_440),
    .q1(temp1_imag_q1)
);

FFT_stages_temp2_real #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp2_real_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp2_real_address0),
    .ce0(temp2_real_ce0),
    .we0(temp2_real_we0),
    .d0(temp2_real_d0),
    .q0(temp2_real_q0)
);

FFT_stages_temp2_real #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp2_imag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp2_imag_address0),
    .ce0(temp2_imag_ce0),
    .we0(temp2_imag_we0),
    .d0(temp2_imag_d0),
    .q0(temp2_imag_q0)
);

FFT_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_375_p0),
    .din1(grp_fu_375_p1),
    .opcode(grp_fu_375_opcode),
    .ce(1'b1),
    .dout(grp_fu_375_p2)
);

FFT_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_379_p0),
    .din1(grp_fu_379_p1),
    .ce(1'b1),
    .dout(grp_fu_379_p2)
);

FFT_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fsub_32ns_32ns_32_5_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_383_p0),
    .din1(grp_fu_383_p1),
    .ce(1'b1),
    .dout(grp_fu_383_p2)
);

FFT_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fsub_32ns_32ns_32_5_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_387_p0),
    .din1(grp_fu_387_p1),
    .ce(1'b1),
    .dout(grp_fu_387_p2)
);

FFT_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32ns_32_4_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_391_p0),
    .din1(grp_fu_391_p1),
    .ce(1'b1),
    .dout(grp_fu_391_p2)
);

FFT_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32ns_32_4_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_396_p0),
    .din1(grp_fu_396_p1),
    .ce(1'b1),
    .dout(grp_fu_396_p2)
);

FFT_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32ns_32_4_max_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_401_p0),
    .din1(grp_fu_401_p1),
    .ce(1'b1),
    .dout(grp_fu_401_p2)
);

FFT_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
FFT_fmul_32ns_32ns_32_4_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_406_p0),
    .din1(grp_fu_406_p1),
    .ce(1'b1),
    .dout(grp_fu_406_p2)
);

FFT_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
FFT_mux_42_32_1_1_U9(
    .din0(32'd1065353216),
    .din1(32'd1060439283),
    .din2(32'd0),
    .din3(32'd3207922931),
    .din4(trunc_ln43_fu_663_p1),
    .dout(tmp_25_fu_667_p6)
);

FFT_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
FFT_mux_42_32_1_1_U10(
    .din0(32'd0),
    .din1(32'd3207922931),
    .din2(32'd3212836864),
    .din3(32'd3207922931),
    .din4(trunc_ln43_fu_663_p1),
    .dout(tmp_26_fu_683_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_reg_328 <= i_reg_740;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_328 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_27_fu_501_p3 == 1'd1))) begin
        i_1_reg_339 <= 4'd0;
    end else if (((icmp_ln35_fu_563_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i_1_reg_339 <= i_5_fu_596_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_28_fu_537_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i_2_reg_363 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        i_2_reg_363 <= i_4_reg_842;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        j_0_reg_351 <= j_reg_780;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_28_fu_537_p3 == 1'd0))) begin
        j_0_reg_351 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        reg_447 <= temp1_real_q1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_447 <= temp1_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        reg_456 <= temp1_imag_q1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_456 <= temp1_imag_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        FFT_input_imag_load_1_reg_763 <= FFT_input_imag_q1;
        FFT_input_imag_load_reg_751 <= FFT_input_imag_q0;
        FFT_input_real_load_1_reg_757 <= FFT_input_real_q1;
        FFT_input_real_load_reg_745 <= FFT_input_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        i_4_reg_842 <= i_4_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_27_fu_501_p3 == 1'd0))) begin
        i_reg_740 <= i_fu_531_p2;
        zext_ln29_1_reg_724[2 : 1] <= zext_ln29_1_fu_525_p1[2 : 1];
        zext_ln29_reg_708[3 : 0] <= zext_ln29_fu_509_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_780 <= j_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_415 <= grp_fu_375_p2;
        reg_424 <= grp_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_433 <= grp_fu_383_p2;
        reg_440 <= grp_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_465 <= grp_fu_391_p2;
        reg_470 <= grp_fu_396_p2;
        reg_475 <= grp_fu_401_p2;
        reg_480 <= grp_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state37))) begin
        reg_485 <= temp2_real_q0;
        reg_493 <= temp2_imag_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln35_fu_563_p2 == 1'd0))) begin
        tmp_24_reg_785 <= {{i_1_reg_339[3:2]}};
        zext_ln36_1_reg_790[3 : 0] <= zext_ln36_1_fu_590_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_28_fu_537_p3 == 1'd0))) begin
        zext_ln36_2_reg_772[0] <= zext_ln36_2_fu_555_p1[0];
zext_ln36_2_reg_772[2] <= zext_ln36_2_fu_555_p1[2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        zext_ln36_reg_823[3 : 0] <= zext_ln36_fu_633_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (icmp_ln42_fu_639_p2 == 1'd0))) begin
        zext_ln43_1_reg_847[2 : 0] <= zext_ln43_1_fu_657_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        zext_ln43_reg_875[2 : 0] <= zext_ln43_fu_699_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        FFT_input_imag_ce0 = 1'b1;
    end else begin
        FFT_input_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        FFT_input_imag_ce1 = 1'b1;
    end else begin
        FFT_input_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        FFT_input_real_ce0 = 1'b1;
    end else begin
        FFT_input_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        FFT_input_real_ce1 = 1'b1;
    end else begin
        FFT_input_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        FFT_output_imag_ce0 = 1'b1;
    end else begin
        FFT_output_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        FFT_output_imag_ce1 = 1'b1;
    end else begin
        FFT_output_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        FFT_output_imag_we0 = 1'b1;
    end else begin
        FFT_output_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        FFT_output_imag_we1 = 1'b1;
    end else begin
        FFT_output_imag_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        FFT_output_real_ce0 = 1'b1;
    end else begin
        FFT_output_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        FFT_output_real_ce1 = 1'b1;
    end else begin
        FFT_output_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        FFT_output_real_we0 = 1'b1;
    end else begin
        FFT_output_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        FFT_output_real_we1 = 1'b1;
    end else begin
        FFT_output_real_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln42_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_375_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_375_opcode = 2'd0;
    end else begin
        grp_fu_375_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_375_p0 = reg_485;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_375_p0 = reg_447;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_375_p0 = reg_465;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_375_p0 = FFT_input_real_load_reg_745;
    end else begin
        grp_fu_375_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_375_p1 = reg_415;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_375_p1 = reg_470;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_375_p1 = FFT_input_real_load_1_reg_757;
    end else begin
        grp_fu_375_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_379_p0 = reg_493;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_379_p0 = reg_456;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_379_p0 = reg_475;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_379_p0 = FFT_input_imag_load_reg_751;
    end else begin
        grp_fu_379_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_379_p1 = reg_424;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state16))) begin
        grp_fu_379_p1 = reg_480;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_379_p1 = FFT_input_imag_load_1_reg_763;
    end else begin
        grp_fu_379_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_383_p0 = reg_485;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_383_p0 = reg_447;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_383_p0 = FFT_input_real_load_reg_745;
    end else begin
        grp_fu_383_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_383_p1 = reg_415;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_383_p1 = FFT_input_real_load_1_reg_757;
    end else begin
        grp_fu_383_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_387_p0 = reg_493;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_387_p0 = reg_456;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_387_p0 = FFT_input_imag_load_reg_751;
    end else begin
        grp_fu_387_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_387_p1 = reg_424;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_387_p1 = FFT_input_imag_load_1_reg_763;
    end else begin
        grp_fu_387_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_391_p0 = tmp_25_fu_667_p6;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_391_p0 = select_ln36_fu_606_p3;
    end else begin
        grp_fu_391_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_391_p1 = temp2_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_391_p1 = temp1_real_q0;
    end else begin
        grp_fu_391_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_396_p0 = tmp_26_fu_683_p6;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_396_p0 = select_ln36_1_fu_616_p3;
    end else begin
        grp_fu_396_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_396_p1 = temp2_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_396_p1 = temp1_imag_q0;
    end else begin
        grp_fu_396_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_401_p0 = tmp_26_fu_683_p6;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_401_p0 = select_ln36_1_fu_616_p3;
    end else begin
        grp_fu_401_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_401_p1 = temp2_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_401_p1 = temp1_real_q0;
    end else begin
        grp_fu_401_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_406_p0 = tmp_25_fu_667_p6;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_406_p0 = select_ln36_fu_606_p3;
    end else begin
        grp_fu_406_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_406_p1 = temp2_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_406_p1 = temp1_imag_q0;
    end else begin
        grp_fu_406_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp1_imag_address0 = zext_ln36_1_fu_590_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_imag_address0 = zext_ln29_reg_708;
    end else begin
        temp1_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        temp1_imag_address1 = zext_ln36_fu_633_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_imag_address1 = zext_ln29_1_reg_724;
    end else begin
        temp1_imag_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11))) begin
        temp1_imag_ce0 = 1'b1;
    end else begin
        temp1_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state19))) begin
        temp1_imag_ce1 = 1'b1;
    end else begin
        temp1_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_imag_we0 = 1'b1;
    end else begin
        temp1_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_imag_we1 = 1'b1;
    end else begin
        temp1_imag_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp1_real_address0 = zext_ln36_1_fu_590_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_real_address0 = zext_ln29_reg_708;
    end else begin
        temp1_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        temp1_real_address1 = zext_ln36_fu_633_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_real_address1 = zext_ln29_1_reg_724;
    end else begin
        temp1_real_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state11))) begin
        temp1_real_ce0 = 1'b1;
    end else begin
        temp1_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state19))) begin
        temp1_real_ce1 = 1'b1;
    end else begin
        temp1_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_real_we0 = 1'b1;
    end else begin
        temp1_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_real_we1 = 1'b1;
    end else begin
        temp1_real_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        temp2_imag_address0 = zext_ln43_fu_699_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp2_imag_address0 = zext_ln43_1_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp2_imag_address0 = zext_ln36_1_reg_790;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp2_imag_address0 = zext_ln36_reg_823;
    end else begin
        temp2_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28))) begin
        temp2_imag_ce0 = 1'b1;
    end else begin
        temp2_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        temp2_imag_d0 = reg_440;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp2_imag_d0 = reg_424;
    end else begin
        temp2_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        temp2_imag_we0 = 1'b1;
    end else begin
        temp2_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        temp2_real_address0 = zext_ln43_fu_699_p1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp2_real_address0 = zext_ln43_1_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        temp2_real_address0 = zext_ln36_1_reg_790;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp2_real_address0 = zext_ln36_reg_823;
    end else begin
        temp2_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28))) begin
        temp2_real_ce0 = 1'b1;
    end else begin
        temp2_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        temp2_real_d0 = reg_433;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        temp2_real_d0 = reg_415;
    end else begin
        temp2_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27))) begin
        temp2_real_we0 = 1'b1;
    end else begin
        temp2_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_27_fu_501_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state10 : begin
            if (((tmp_28_fu_537_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln35_fu_563_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state28 : begin
            if (((icmp_ln42_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FFT_input_imag_address0 = zext_ln29_fu_509_p1;

assign FFT_input_imag_address1 = zext_ln29_1_fu_525_p1;

assign FFT_input_real_address0 = zext_ln29_fu_509_p1;

assign FFT_input_real_address1 = zext_ln29_1_fu_525_p1;

assign FFT_output_imag_address0 = zext_ln43_reg_875;

assign FFT_output_imag_address1 = zext_ln43_1_reg_847;

assign FFT_output_imag_d0 = reg_424;

assign FFT_output_imag_d1 = reg_440;

assign FFT_output_real_address0 = zext_ln43_reg_875;

assign FFT_output_real_address1 = zext_ln43_1_reg_847;

assign FFT_output_real_d0 = reg_415;

assign FFT_output_real_d1 = reg_433;

assign add_ln36_fu_585_p2 = (zext_ln35_fu_559_p1 + zext_ln36_2_reg_772);

assign add_ln_fu_626_p3 = {{tmp_24_reg_785}, {j_0_reg_351}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_4_fu_645_p2 = (i_2_reg_363 + 3'd1);

assign i_5_fu_596_p2 = (i_1_reg_339 + 4'd4);

assign i_fu_531_p2 = (4'd2 + i_0_reg_328);

assign icmp_ln35_fu_563_p2 = ((j_0_reg_351 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_639_p2 = ((i_2_reg_363 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_569_p2 = (j_0_reg_351 + 2'd1);

assign or_ln29_fu_519_p2 = (trunc_ln28_fu_515_p1 | 3'd1);

assign or_ln36_fu_549_p2 = (trunc_ln34_fu_545_p1 | 3'd2);

assign select_ln36_1_fu_616_p3 = ((trunc_ln36_fu_602_p1[0:0] === 1'b1) ? 32'd3212836864 : 32'd0);

assign select_ln36_fu_606_p3 = ((trunc_ln36_fu_602_p1[0:0] === 1'b1) ? 32'd0 : 32'd1065353216);

assign tmp_27_fu_501_p3 = i_0_reg_328[32'd3];

assign tmp_28_fu_537_p3 = i_1_reg_339[32'd3];

assign trunc_ln28_fu_515_p1 = i_0_reg_328[2:0];

assign trunc_ln34_fu_545_p1 = i_1_reg_339[2:0];

assign trunc_ln36_fu_602_p1 = j_0_reg_351[0:0];

assign trunc_ln43_fu_663_p1 = i_2_reg_363[1:0];

assign xor_ln43_fu_651_p2 = (i_2_reg_363 ^ 3'd4);

assign zext_ln29_1_fu_525_p1 = or_ln29_fu_519_p2;

assign zext_ln29_fu_509_p1 = i_0_reg_328;

assign zext_ln35_fu_559_p1 = j_0_reg_351;

assign zext_ln36_1_fu_590_p1 = add_ln36_fu_585_p2;

assign zext_ln36_2_fu_555_p1 = or_ln36_fu_549_p2;

assign zext_ln36_fu_633_p1 = add_ln_fu_626_p3;

assign zext_ln43_1_fu_657_p1 = xor_ln43_fu_651_p2;

assign zext_ln43_fu_699_p1 = i_2_reg_363;

always @ (posedge ap_clk) begin
    zext_ln29_reg_708[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln29_1_reg_724[0] <= 1'b1;
    zext_ln29_1_reg_724[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln36_2_reg_772[1] <= 1'b1;
    zext_ln36_2_reg_772[3] <= 1'b0;
    zext_ln36_1_reg_790[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_823[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln43_1_reg_847[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln43_reg_875[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //FFT_stages
