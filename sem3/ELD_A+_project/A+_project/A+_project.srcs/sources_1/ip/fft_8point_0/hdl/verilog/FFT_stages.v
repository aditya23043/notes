// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module FFT_stages (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        FFT_input_M_real_address0,
        FFT_input_M_real_ce0,
        FFT_input_M_real_q0,
        FFT_input_M_real_address1,
        FFT_input_M_real_ce1,
        FFT_input_M_real_q1,
        FFT_input_M_imag_address0,
        FFT_input_M_imag_ce0,
        FFT_input_M_imag_q0,
        FFT_input_M_imag_address1,
        FFT_input_M_imag_ce1,
        FFT_input_M_imag_q1,
        FFT_output_M_real_address0,
        FFT_output_M_real_ce0,
        FFT_output_M_real_we0,
        FFT_output_M_real_d0,
        FFT_output_M_real_address1,
        FFT_output_M_real_ce1,
        FFT_output_M_real_we1,
        FFT_output_M_real_d1,
        FFT_output_M_imag_address0,
        FFT_output_M_imag_ce0,
        FFT_output_M_imag_we0,
        FFT_output_M_imag_d0,
        FFT_output_M_imag_address1,
        FFT_output_M_imag_ce1,
        FFT_output_M_imag_we1,
        FFT_output_M_imag_d1
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] FFT_input_M_real_address0;
output   FFT_input_M_real_ce0;
input  [31:0] FFT_input_M_real_q0;
output  [2:0] FFT_input_M_real_address1;
output   FFT_input_M_real_ce1;
input  [31:0] FFT_input_M_real_q1;
output  [2:0] FFT_input_M_imag_address0;
output   FFT_input_M_imag_ce0;
input  [31:0] FFT_input_M_imag_q0;
output  [2:0] FFT_input_M_imag_address1;
output   FFT_input_M_imag_ce1;
input  [31:0] FFT_input_M_imag_q1;
output  [2:0] FFT_output_M_real_address0;
output   FFT_output_M_real_ce0;
output   FFT_output_M_real_we0;
output  [31:0] FFT_output_M_real_d0;
output  [2:0] FFT_output_M_real_address1;
output   FFT_output_M_real_ce1;
output   FFT_output_M_real_we1;
output  [31:0] FFT_output_M_real_d1;
output  [2:0] FFT_output_M_imag_address0;
output   FFT_output_M_imag_ce0;
output   FFT_output_M_imag_we0;
output  [31:0] FFT_output_M_imag_d0;
output  [2:0] FFT_output_M_imag_address1;
output   FFT_output_M_imag_ce1;
output   FFT_output_M_imag_we1;
output  [31:0] FFT_output_M_imag_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg FFT_input_M_real_ce0;
reg FFT_input_M_real_ce1;
reg FFT_input_M_imag_ce0;
reg FFT_input_M_imag_ce1;
reg FFT_output_M_real_ce0;
reg FFT_output_M_real_we0;
reg FFT_output_M_real_ce1;
reg FFT_output_M_real_we1;
reg FFT_output_M_imag_ce0;
reg FFT_output_M_imag_we0;
reg FFT_output_M_imag_ce1;
reg FFT_output_M_imag_we1;

(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_433_p2;
reg   [31:0] reg_473;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state44;
wire   [31:0] grp_fu_437_p2;
reg   [31:0] reg_482;
wire   [31:0] grp_fu_441_p2;
reg   [31:0] reg_491;
wire   [31:0] grp_fu_445_p2;
reg   [31:0] reg_498;
wire   [31:0] temp1_M_real_q1;
reg   [31:0] reg_505;
wire    ap_CS_fsm_state14;
wire   [31:0] temp1_M_real_q0;
wire   [31:0] temp1_M_imag_q1;
reg   [31:0] reg_514;
wire   [31:0] temp1_M_imag_q0;
wire   [31:0] grp_fu_449_p2;
reg   [31:0] reg_523;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state34;
wire   [31:0] grp_fu_454_p2;
reg   [31:0] reg_528;
wire   [31:0] grp_fu_459_p2;
reg   [31:0] reg_533;
wire   [31:0] grp_fu_464_p2;
reg   [31:0] reg_538;
wire   [31:0] temp2_M_real_q0;
reg   [31:0] reg_543;
wire    ap_CS_fsm_state31;
wire   [31:0] temp2_M_imag_q0;
reg   [31:0] reg_551;
wire   [2:0] add_ln14_fu_559_p2;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln14_1_fu_577_p2;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln18_fu_603_p1;
reg   [63:0] zext_ln18_reg_818;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_2_fu_595_p3;
wire   [63:0] zext_ln18_1_fu_619_p1;
reg   [63:0] zext_ln18_1_reg_834;
wire   [3:0] i_fu_625_p2;
reg   [3:0] i_reg_850;
reg   [31:0] p_r_M_real_reg_855;
wire    ap_CS_fsm_state5;
reg   [31:0] p_r_M_imag_reg_861;
reg   [31:0] FFT_input_M_real_lo_reg_867;
reg   [31:0] FFT_input_M_imag_lo_reg_873;
wire   [3:0] zext_ln25_2_fu_649_p1;
reg   [3:0] zext_ln25_2_reg_882;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_3_fu_631_p3;
wire   [1:0] j_fu_663_p2;
reg   [1:0] j_reg_890;
wire    ap_CS_fsm_state13;
reg   [1:0] tmp_1_reg_895;
wire   [0:0] icmp_ln24_fu_657_p2;
wire   [63:0] zext_ln25_1_fu_684_p1;
reg   [63:0] zext_ln25_1_reg_900;
wire   [3:0] i_3_fu_690_p2;
wire   [31:0] p_r_M_real_5_fu_700_p3;
wire   [31:0] p_r_M_imag_5_fu_710_p3;
wire   [63:0] zext_ln25_fu_727_p1;
reg   [63:0] zext_ln25_reg_933;
wire    ap_CS_fsm_state21;
wire   [2:0] i_2_fu_739_p2;
reg   [2:0] i_2_reg_952;
wire    ap_CS_fsm_state30;
wire   [63:0] zext_ln32_1_fu_751_p1;
reg   [63:0] zext_ln32_1_reg_957;
wire   [0:0] icmp_ln31_fu_733_p2;
wire   [31:0] p_r_M_real_3_fu_761_p6;
wire   [31:0] p_r_M_imag_3_fu_777_p6;
wire   [63:0] zext_ln32_fu_793_p1;
reg   [63:0] zext_ln32_reg_985;
wire    ap_CS_fsm_state38;
reg   [2:0] temp1_M_real_address0;
reg    temp1_M_real_ce0;
reg    temp1_M_real_we0;
reg   [31:0] temp1_M_real_d0;
reg   [2:0] temp1_M_real_address1;
reg    temp1_M_real_ce1;
reg    temp1_M_real_we1;
reg   [2:0] temp1_M_imag_address0;
reg    temp1_M_imag_ce0;
reg    temp1_M_imag_we0;
reg   [31:0] temp1_M_imag_d0;
reg   [2:0] temp1_M_imag_address1;
reg    temp1_M_imag_ce1;
reg    temp1_M_imag_we1;
reg   [2:0] temp2_M_real_address0;
reg    temp2_M_real_ce0;
reg    temp2_M_real_we0;
reg   [31:0] temp2_M_real_d0;
reg   [2:0] temp2_M_imag_address0;
reg    temp2_M_imag_ce0;
reg    temp2_M_imag_we0;
reg   [31:0] temp2_M_imag_d0;
reg   [2:0] phi_ln14_reg_364;
wire   [0:0] icmp_ln14_fu_571_p2;
reg   [2:0] phi_ln14_1_reg_375;
wire   [0:0] icmp_ln14_1_fu_589_p2;
reg   [3:0] i_0_reg_386;
wire    ap_CS_fsm_state11;
reg   [3:0] i2_0_reg_397;
reg   [1:0] j_0_reg_409;
wire    ap_CS_fsm_state29;
reg   [2:0] i3_0_reg_421;
wire    ap_CS_fsm_state45;
wire   [63:0] zext_ln14_fu_565_p1;
wire   [63:0] zext_ln14_1_fu_583_p1;
wire    ap_CS_fsm_state28;
reg   [31:0] grp_fu_433_p0;
reg   [31:0] grp_fu_433_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state40;
reg   [31:0] grp_fu_437_p0;
reg   [31:0] grp_fu_437_p1;
reg   [31:0] grp_fu_441_p0;
reg   [31:0] grp_fu_441_p1;
reg   [31:0] grp_fu_445_p0;
reg   [31:0] grp_fu_445_p1;
reg   [31:0] grp_fu_449_p0;
reg   [31:0] grp_fu_449_p1;
reg   [31:0] grp_fu_454_p0;
reg   [31:0] grp_fu_454_p1;
reg   [31:0] grp_fu_459_p0;
reg   [31:0] grp_fu_459_p1;
reg   [31:0] grp_fu_464_p0;
reg   [31:0] grp_fu_464_p1;
wire   [2:0] trunc_ln17_fu_609_p1;
wire   [2:0] or_ln18_fu_613_p2;
wire   [2:0] trunc_ln23_fu_639_p1;
wire   [2:0] or_ln25_fu_643_p2;
wire   [3:0] zext_ln24_fu_653_p1;
wire   [3:0] add_ln25_fu_679_p2;
wire   [0:0] trunc_ln25_fu_696_p1;
wire   [3:0] add_ln_fu_720_p3;
wire   [2:0] xor_ln32_fu_745_p2;
wire   [1:0] trunc_ln32_fu_757_p1;
reg   [1:0] grp_fu_433_opcode;
reg   [44:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
end

FFT_stages_temp1_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp1_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp1_M_real_address0),
    .ce0(temp1_M_real_ce0),
    .we0(temp1_M_real_we0),
    .d0(temp1_M_real_d0),
    .q0(temp1_M_real_q0),
    .address1(temp1_M_real_address1),
    .ce1(temp1_M_real_ce1),
    .we1(temp1_M_real_we1),
    .d1(reg_491),
    .q1(temp1_M_real_q1)
);

FFT_stages_temp1_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp1_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp1_M_imag_address0),
    .ce0(temp1_M_imag_ce0),
    .we0(temp1_M_imag_we0),
    .d0(temp1_M_imag_d0),
    .q0(temp1_M_imag_q0),
    .address1(temp1_M_imag_address1),
    .ce1(temp1_M_imag_ce1),
    .we1(temp1_M_imag_we1),
    .d1(reg_498),
    .q1(temp1_M_imag_q1)
);

FFT_stages_temp2_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp2_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp2_M_real_address0),
    .ce0(temp2_M_real_ce0),
    .we0(temp2_M_real_we0),
    .d0(temp2_M_real_d0),
    .q0(temp2_M_real_q0)
);

FFT_stages_temp2_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp2_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp2_M_imag_address0),
    .ce0(temp2_M_imag_ce0),
    .we0(temp2_M_imag_we0),
    .d0(temp2_M_imag_d0),
    .q0(temp2_M_imag_q0)
);

fft_8point_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_8point_faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_433_p0),
    .din1(grp_fu_433_p1),
    .opcode(grp_fu_433_opcode),
    .ce(1'b1),
    .dout(grp_fu_433_p2)
);

fft_8point_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_8point_fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_437_p0),
    .din1(grp_fu_437_p1),
    .ce(1'b1),
    .dout(grp_fu_437_p2)
);

fft_8point_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_8point_fsub_32ns_32ns_32_5_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_441_p0),
    .din1(grp_fu_441_p1),
    .ce(1'b1),
    .dout(grp_fu_441_p2)
);

fft_8point_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_8point_fsub_32ns_32ns_32_5_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_445_p0),
    .din1(grp_fu_445_p1),
    .ce(1'b1),
    .dout(grp_fu_445_p2)
);

fft_8point_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_8point_fmul_32ns_32ns_32_4_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_449_p0),
    .din1(grp_fu_449_p1),
    .ce(1'b1),
    .dout(grp_fu_449_p2)
);

fft_8point_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_8point_fmul_32ns_32ns_32_4_max_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_454_p0),
    .din1(grp_fu_454_p1),
    .ce(1'b1),
    .dout(grp_fu_454_p2)
);

fft_8point_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_8point_fmul_32ns_32ns_32_4_max_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_459_p0),
    .din1(grp_fu_459_p1),
    .ce(1'b1),
    .dout(grp_fu_459_p2)
);

fft_8point_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_8point_fmul_32ns_32ns_32_4_max_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_464_p0),
    .din1(grp_fu_464_p1),
    .ce(1'b1),
    .dout(grp_fu_464_p2)
);

fft_8point_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
fft_8point_mux_42_32_1_1_U9(
    .din0(32'd1065353216),
    .din1(32'd1060439283),
    .din2(32'd0),
    .din3(32'd3207922931),
    .din4(trunc_ln32_fu_757_p1),
    .dout(p_r_M_real_3_fu_761_p6)
);

fft_8point_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
fft_8point_mux_42_32_1_1_U10(
    .din0(32'd0),
    .din1(32'd3207922931),
    .din2(32'd3212836864),
    .din3(32'd3207922931),
    .din4(trunc_ln32_fu_757_p1),
    .dout(p_r_M_imag_3_fu_777_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_595_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i2_0_reg_397 <= 4'd0;
    end else if (((icmp_ln24_fu_657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        i2_0_reg_397 <= i_3_fu_690_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_631_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        i3_0_reg_421 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        i3_0_reg_421 <= i_2_reg_952;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_1_fu_589_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_386 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_0_reg_386 <= i_reg_850;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        j_0_reg_409 <= j_reg_890;
    end else if (((tmp_3_fu_631_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        j_0_reg_409 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_571_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln14_1_reg_375 <= 3'd0;
    end else if (((icmp_ln14_1_fu_589_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln14_1_reg_375 <= add_ln14_1_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_571_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln14_reg_364 <= add_ln14_fu_559_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln14_reg_364 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        reg_505 <= temp1_M_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        reg_505 <= temp1_M_real_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        reg_514 <= temp1_M_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        reg_514 <= temp1_M_imag_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        FFT_input_M_imag_lo_reg_873 <= FFT_input_M_imag_q1;
        FFT_input_M_real_lo_reg_867 <= FFT_input_M_real_q1;
        p_r_M_imag_reg_861 <= FFT_input_M_imag_q0;
        p_r_M_real_reg_855 <= FFT_input_M_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        i_2_reg_952 <= i_2_fu_739_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_595_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_850 <= i_fu_625_p2;
        zext_ln18_1_reg_834[2 : 1] <= zext_ln18_1_fu_619_p1[2 : 1];
        zext_ln18_reg_818[3 : 0] <= zext_ln18_fu_603_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_890 <= j_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_473 <= grp_fu_433_p2;
        reg_482 <= grp_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_491 <= grp_fu_441_p2;
        reg_498 <= grp_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_523 <= grp_fu_449_p2;
        reg_528 <= grp_fu_454_p2;
        reg_533 <= grp_fu_459_p2;
        reg_538 <= grp_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state39))) begin
        reg_543 <= temp2_M_real_q0;
        reg_551 <= temp2_M_imag_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_657_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        tmp_1_reg_895 <= {{i2_0_reg_397[3:2]}};
        zext_ln25_1_reg_900[3 : 0] <= zext_ln25_1_fu_684_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_631_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        zext_ln25_2_reg_882[0] <= zext_ln25_2_fu_649_p1[0];
zext_ln25_2_reg_882[2] <= zext_ln25_2_fu_649_p1[2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        zext_ln25_reg_933[3 : 0] <= zext_ln25_fu_727_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln31_fu_733_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        zext_ln32_1_reg_957[2 : 0] <= zext_ln32_1_fu_751_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        zext_ln32_reg_985[2 : 0] <= zext_ln32_fu_793_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        FFT_input_M_imag_ce0 = 1'b1;
    end else begin
        FFT_input_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        FFT_input_M_imag_ce1 = 1'b1;
    end else begin
        FFT_input_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        FFT_input_M_real_ce0 = 1'b1;
    end else begin
        FFT_input_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        FFT_input_M_real_ce1 = 1'b1;
    end else begin
        FFT_input_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        FFT_output_M_imag_ce0 = 1'b1;
    end else begin
        FFT_output_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        FFT_output_M_imag_ce1 = 1'b1;
    end else begin
        FFT_output_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        FFT_output_M_imag_we0 = 1'b1;
    end else begin
        FFT_output_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        FFT_output_M_imag_we1 = 1'b1;
    end else begin
        FFT_output_M_imag_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        FFT_output_M_real_ce0 = 1'b1;
    end else begin
        FFT_output_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        FFT_output_M_real_ce1 = 1'b1;
    end else begin
        FFT_output_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        FFT_output_M_real_we0 = 1'b1;
    end else begin
        FFT_output_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        FFT_output_M_real_we1 = 1'b1;
    end else begin
        FFT_output_M_real_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln31_fu_733_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_733_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_433_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_433_opcode = 2'd0;
    end else begin
        grp_fu_433_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_433_p0 = reg_543;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_433_p0 = reg_505;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_433_p0 = reg_523;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_433_p0 = p_r_M_real_reg_855;
    end else begin
        grp_fu_433_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_433_p1 = reg_473;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_433_p1 = reg_528;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_433_p1 = FFT_input_M_real_lo_reg_867;
    end else begin
        grp_fu_433_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_437_p0 = reg_551;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_437_p0 = reg_514;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_437_p0 = reg_533;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_437_p0 = p_r_M_imag_reg_861;
    end else begin
        grp_fu_437_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_437_p1 = reg_482;
    end else if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_437_p1 = reg_538;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_437_p1 = FFT_input_M_imag_lo_reg_873;
    end else begin
        grp_fu_437_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_441_p0 = reg_543;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_441_p0 = reg_505;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_441_p0 = p_r_M_real_reg_855;
    end else begin
        grp_fu_441_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_441_p1 = reg_473;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_441_p1 = FFT_input_M_real_lo_reg_867;
    end else begin
        grp_fu_441_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        grp_fu_445_p0 = reg_551;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_445_p0 = reg_514;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_445_p0 = p_r_M_imag_reg_861;
    end else begin
        grp_fu_445_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_445_p1 = reg_482;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_445_p1 = FFT_input_M_imag_lo_reg_873;
    end else begin
        grp_fu_445_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_449_p0 = p_r_M_real_3_fu_761_p6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_449_p0 = p_r_M_real_5_fu_700_p3;
    end else begin
        grp_fu_449_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_449_p1 = temp2_M_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_449_p1 = temp1_M_real_q1;
    end else begin
        grp_fu_449_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_454_p0 = p_r_M_imag_3_fu_777_p6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_454_p0 = p_r_M_imag_5_fu_710_p3;
    end else begin
        grp_fu_454_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_454_p1 = temp2_M_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_454_p1 = temp1_M_imag_q1;
    end else begin
        grp_fu_454_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_459_p0 = p_r_M_imag_3_fu_777_p6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_459_p0 = p_r_M_imag_5_fu_710_p3;
    end else begin
        grp_fu_459_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_459_p1 = temp2_M_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_459_p1 = temp1_M_real_q1;
    end else begin
        grp_fu_459_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_464_p0 = p_r_M_real_3_fu_761_p6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_464_p0 = p_r_M_real_5_fu_700_p3;
    end else begin
        grp_fu_464_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_464_p1 = temp2_M_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_464_p1 = temp1_M_imag_q1;
    end else begin
        grp_fu_464_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        temp1_M_imag_address0 = zext_ln25_fu_727_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp1_M_imag_address0 = zext_ln18_reg_818;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp1_M_imag_address0 = zext_ln14_fu_565_p1;
    end else begin
        temp1_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        temp1_M_imag_address1 = zext_ln25_1_fu_684_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp1_M_imag_address1 = zext_ln18_1_reg_834;
    end else begin
        temp1_M_imag_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state2))) begin
        temp1_M_imag_ce0 = 1'b1;
    end else begin
        temp1_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13))) begin
        temp1_M_imag_ce1 = 1'b1;
    end else begin
        temp1_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp1_M_imag_d0 = reg_482;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp1_M_imag_d0 = 32'd0;
    end else begin
        temp1_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2))) begin
        temp1_M_imag_we0 = 1'b1;
    end else begin
        temp1_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp1_M_imag_we1 = 1'b1;
    end else begin
        temp1_M_imag_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        temp1_M_real_address0 = zext_ln25_fu_727_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp1_M_real_address0 = zext_ln18_reg_818;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp1_M_real_address0 = zext_ln14_fu_565_p1;
    end else begin
        temp1_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        temp1_M_real_address1 = zext_ln25_1_fu_684_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        temp1_M_real_address1 = zext_ln18_1_reg_834;
    end else begin
        temp1_M_real_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state2))) begin
        temp1_M_real_ce0 = 1'b1;
    end else begin
        temp1_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state13))) begin
        temp1_M_real_ce1 = 1'b1;
    end else begin
        temp1_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp1_M_real_d0 = reg_473;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp1_M_real_d0 = 32'd0;
    end else begin
        temp1_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2))) begin
        temp1_M_real_we0 = 1'b1;
    end else begin
        temp1_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp1_M_real_we1 = 1'b1;
    end else begin
        temp1_M_real_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        temp2_M_imag_address0 = zext_ln32_fu_793_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp2_M_imag_address0 = zext_ln32_1_fu_751_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp2_M_imag_address0 = zext_ln25_1_reg_900;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp2_M_imag_address0 = zext_ln25_reg_933;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        temp2_M_imag_address0 = zext_ln14_1_fu_583_p1;
    end else begin
        temp2_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state3))) begin
        temp2_M_imag_ce0 = 1'b1;
    end else begin
        temp2_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        temp2_M_imag_d0 = reg_498;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp2_M_imag_d0 = reg_482;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        temp2_M_imag_d0 = 32'd0;
    end else begin
        temp2_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state3))) begin
        temp2_M_imag_we0 = 1'b1;
    end else begin
        temp2_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        temp2_M_real_address0 = zext_ln32_fu_793_p1;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        temp2_M_real_address0 = zext_ln32_1_fu_751_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        temp2_M_real_address0 = zext_ln25_1_reg_900;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp2_M_real_address0 = zext_ln25_reg_933;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        temp2_M_real_address0 = zext_ln14_1_fu_583_p1;
    end else begin
        temp2_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state3))) begin
        temp2_M_real_ce0 = 1'b1;
    end else begin
        temp2_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        temp2_M_real_d0 = reg_491;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        temp2_M_real_d0 = reg_473;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        temp2_M_real_d0 = 32'd0;
    end else begin
        temp2_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state3))) begin
        temp2_M_real_we0 = 1'b1;
    end else begin
        temp2_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln14_fu_571_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln14_1_fu_589_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_2_fu_595_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state12 : begin
            if (((tmp_3_fu_631_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln24_fu_657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state30 : begin
            if (((icmp_ln31_fu_733_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign FFT_input_M_imag_address0 = zext_ln18_fu_603_p1;

assign FFT_input_M_imag_address1 = zext_ln18_1_fu_619_p1;

assign FFT_input_M_real_address0 = zext_ln18_fu_603_p1;

assign FFT_input_M_real_address1 = zext_ln18_1_fu_619_p1;

assign FFT_output_M_imag_address0 = zext_ln32_reg_985;

assign FFT_output_M_imag_address1 = zext_ln32_1_reg_957;

assign FFT_output_M_imag_d0 = reg_482;

assign FFT_output_M_imag_d1 = reg_498;

assign FFT_output_M_real_address0 = zext_ln32_reg_985;

assign FFT_output_M_real_address1 = zext_ln32_1_reg_957;

assign FFT_output_M_real_d0 = reg_473;

assign FFT_output_M_real_d1 = reg_491;

assign add_ln14_1_fu_577_p2 = (phi_ln14_1_reg_375 + 3'd1);

assign add_ln14_fu_559_p2 = (phi_ln14_reg_364 + 3'd1);

assign add_ln25_fu_679_p2 = (zext_ln25_2_reg_882 + zext_ln24_fu_653_p1);

assign add_ln_fu_720_p3 = {{tmp_1_reg_895}, {j_0_reg_409}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign i_2_fu_739_p2 = (i3_0_reg_421 + 3'd1);

assign i_3_fu_690_p2 = (i2_0_reg_397 + 4'd4);

assign i_fu_625_p2 = (4'd2 + i_0_reg_386);

assign icmp_ln14_1_fu_589_p2 = ((phi_ln14_1_reg_375 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_571_p2 = ((phi_ln14_reg_364 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_657_p2 = ((j_0_reg_409 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_733_p2 = ((i3_0_reg_421 == 3'd4) ? 1'b1 : 1'b0);

assign j_fu_663_p2 = (j_0_reg_409 + 2'd1);

assign or_ln18_fu_613_p2 = (trunc_ln17_fu_609_p1 | 3'd1);

assign or_ln25_fu_643_p2 = (trunc_ln23_fu_639_p1 | 3'd2);

assign p_r_M_imag_5_fu_710_p3 = ((trunc_ln25_fu_696_p1[0:0] === 1'b1) ? 32'd3212836864 : 32'd0);

assign p_r_M_real_5_fu_700_p3 = ((trunc_ln25_fu_696_p1[0:0] === 1'b1) ? 32'd0 : 32'd1065353216);

assign tmp_2_fu_595_p3 = i_0_reg_386[32'd3];

assign tmp_3_fu_631_p3 = i2_0_reg_397[32'd3];

assign trunc_ln17_fu_609_p1 = i_0_reg_386[2:0];

assign trunc_ln23_fu_639_p1 = i2_0_reg_397[2:0];

assign trunc_ln25_fu_696_p1 = j_0_reg_409[0:0];

assign trunc_ln32_fu_757_p1 = i3_0_reg_421[1:0];

assign xor_ln32_fu_745_p2 = (i3_0_reg_421 ^ 3'd4);

assign zext_ln14_1_fu_583_p1 = phi_ln14_1_reg_375;

assign zext_ln14_fu_565_p1 = phi_ln14_reg_364;

assign zext_ln18_1_fu_619_p1 = or_ln18_fu_613_p2;

assign zext_ln18_fu_603_p1 = i_0_reg_386;

assign zext_ln24_fu_653_p1 = j_0_reg_409;

assign zext_ln25_1_fu_684_p1 = add_ln25_fu_679_p2;

assign zext_ln25_2_fu_649_p1 = or_ln25_fu_643_p2;

assign zext_ln25_fu_727_p1 = add_ln_fu_720_p3;

assign zext_ln32_1_fu_751_p1 = xor_ln32_fu_745_p2;

assign zext_ln32_fu_793_p1 = i3_0_reg_421;

always @ (posedge ap_clk) begin
    zext_ln18_reg_818[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_1_reg_834[0] <= 1'b1;
    zext_ln18_1_reg_834[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln25_2_reg_882[1] <= 1'b1;
    zext_ln25_2_reg_882[3] <= 1'b0;
    zext_ln25_1_reg_900[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln25_reg_933[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln32_1_reg_957[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln32_reg_985[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //FFT_stages
